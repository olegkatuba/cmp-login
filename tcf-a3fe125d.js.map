{"version":3,"file":"tcf-a3fe125d.js","sources":["../src/embeddings/tcf.ts"],"sourcesContent":["import { BaseCategory, Service, TCFData, TCFFeature, TCFUISettings, TCFVendor } from '@usercentrics/cmp-browser-sdk';\nimport { Classnames, Styles } from './essentials';\nimport {\n  MAX_LIST_SIZE_IN_SUBLIST,\n  createHTMLElement,\n  embedExpandableItem,\n  embedLink,\n  embedSeries,\n  embedStorageInfoSection,\n  embedStoredInfoSection,\n  embedText,\n  extractTcfEmbedOptions,\n  getTitle,\n  reset,\n} from './helpers';\nimport { TCFEmbedOptions, TCF_EMBEDDING_TYPE } from './interfaces';\nimport { Classnames as TcfClassNames, Styles as TcfStyles } from './tcfEssentials';\nimport { getFormatedLegalDescription, isMailAddress } from '../modules/helpers';\nimport { UC_UI_GLOBAL_NAMESPACE } from '../constants';\n\n/**\n * Embeds a series of items into a given HTML container with a special structure.\n * @param fragment A fragment to be used as a lightweigh version of the Document\n * @param headline The headline of the series to be embedded.\n * @param itemNames The items of the series to be embedded.\n * @param useUcStyling idicates whether the predifined styling should be used\n * @param description optional description. Added after the headline\n */\nconst embedBlockSeries = (\n  fragment: DocumentFragment,\n  itemNames: string[],\n  useUcStyling: boolean,\n  viewMoreFunction: () => void,\n  buttonText: string,\n  headline?: string,\n): void => {\n  const list = createHTMLElement(\n    'ul',\n    useUcStyling ? TcfClassNames.subElementBlockList : TcfClassNames.subElementItemList,\n    [TcfStyles.subElementBlockList],\n    itemNames.map((item) => {\n      return createHTMLElement(\n        'li',\n        useUcStyling ? TcfClassNames.subElementBlockListElement : Classnames.subElementItemListElement,\n        [TcfStyles.subElementBlockListElement],\n        item,\n        useUcStyling,\n      );\n    }),\n    useUcStyling,\n  );\n  const button = createHTMLElement(\n    'button',\n    TcfClassNames.viewMoreButton,\n    [TcfStyles.viewMoreButton],\n    buttonText,\n    useUcStyling,\n  );\n  button.addEventListener('click', () => viewMoreFunction());\n\n  fragment.appendChild(\n    createHTMLElement(\n      'div',\n      Classnames.subElement,\n      [Styles.subElement],\n      [...(headline ? [getTitle(headline, true, useUcStyling)] : []), list, button],\n      useUcStyling,\n    ),\n  );\n};\n\n/**\n * Create a new HTMl Element. Add this Element to the provided container.\n * @param fragment A fragment to be used as a lightweigh version of the Document\n * @param category Category, which needs to be embedded.\n * @param useUcStyling idicates whether the predifined styling should be used.\n * @param uiSettings TCFUISettings object that contains the labels.\n */\nconst embedCategory = (\n  fragment: DocumentFragment,\n  category: BaseCategory,\n  useUcStyling: boolean,\n  uiSettings: TCFUISettings,\n): void => {\n  if (category.description) {\n    embedText(fragment, true, useUcStyling, [category.description]);\n  }\n\n  // TODO: Scroll directly to right category in showSecondLayer\n  if (category.services.length > 0) {\n    embedBlockSeries(\n      fragment,\n      category.services.map((s) => s.name),\n      useUcStyling,\n      () => window[UC_UI_GLOBAL_NAMESPACE]?.showSecondLayer(),\n      uiSettings.labels.nonTCFLabels.general.showMore,\n    );\n  }\n};\n\n/**\n * Creates a new HTMl Element. Add this Element to the provided container.\n * @param container The container that the newly created HTML Element is embedded in.\n * @param categories Categories, which need to be embedded.\n * @param useUcStyling idicates whether the predifined styling should be used.\n * @param uiSettings TCFUISettings object that contains the labels.\n */\nconst embedCategoryList = (\n  container: Element | Node,\n  categories: BaseCategory[],\n  useUcStyling: boolean,\n  uiSettings: TCFUISettings,\n): void => {\n  const fragment = document.createDocumentFragment();\n\n  categories.forEach((category) => {\n    const categoryDataFragment = document.createDocumentFragment();\n    embedCategory(categoryDataFragment, category, useUcStyling, uiSettings);\n    embedExpandableItem(fragment, category.label, categoryDataFragment, useUcStyling);\n  });\n\n  container.appendChild(fragment);\n};\n\n/**\n * Create a new HTMl Element. Add this Element to the provided container.\n * @param fragment A fragment to be used as a lightweigh version of the Document\n * @param basePurpose Purpose (of type BasePurpose), which needs to be embedded.\n * @param useUcStyling idicates whether the predifined styling should be used.\n * @param uiSettings TCFUISettings object that contains the labels.\n */\nconst embedTCFBasePurpose = (\n  fragment: DocumentFragment,\n  basePurpose: TCFFeature,\n  vendors: string[],\n  useUcStyling: boolean,\n  uiSettings: TCFUISettings,\n): void => {\n  if (basePurpose.description) {\n    embedText(fragment, true, useUcStyling, [basePurpose.description]);\n  }\n  const legalDescriptions = getFormatedLegalDescription(basePurpose.descriptionLegal);\n\n  if (typeof legalDescriptions === 'string') {\n    embedText(fragment, true, useUcStyling, [legalDescriptions]);\n  } else {\n    legalDescriptions.forEach((description) => {\n      embedSeries(fragment, true, useUcStyling, description.bulletPoints, description.title);\n    });\n  }\n\n  // TODO: Scroll directly to right purpose in showSecondLayer\n  if (vendors.length > 0) {\n    embedBlockSeries(\n      fragment,\n      vendors,\n      useUcStyling,\n      () => window[UC_UI_GLOBAL_NAMESPACE]?.showSecondLayer(),\n      uiSettings.labels.nonTCFLabels.general.showMore,\n      uiSettings.secondLayer.tabs.vendors.label,\n    );\n  }\n};\n\n/**\n * Create a new HTMl Element. Add this Element to the provided container.\n * @param container The container that the newly created HTML Element is embedded in.\n * @param basePurposes Purposes (of type BasePurpose), which need to be embedded.\n * @param iabVendors iab vendors to be filtered on a lower level.\n * @param useUcStyling idicates whether the predifined styling should be used.\n * @param uiSettings TCFUISettings object that contains the labels.\n */\nconst embedBasePurposeList = (\n  container: Element | Node,\n  basePurposes: TCFFeature[],\n  iabVendors: TCFVendor[],\n  useUcStyling: boolean,\n  uiSettings: TCFUISettings,\n): void => {\n  const fragment = document.createDocumentFragment();\n\n  basePurposes.forEach((basePurpose) => {\n    const purposeDataFragment = document.createDocumentFragment();\n\n    embedTCFBasePurpose(\n      purposeDataFragment,\n      basePurpose,\n      // Get the first (maxListSizeInSublist = 5) names of vendors that have the basePurpose listed in their purposes\n      iabVendors\n        .filter((v) => v.purposes.filter((idName) => idName.id === basePurpose.id).length > 0)\n        .slice(0, MAX_LIST_SIZE_IN_SUBLIST)\n        .map((v) => v.name),\n      useUcStyling,\n      uiSettings,\n    );\n    embedExpandableItem(fragment, basePurpose.name, purposeDataFragment, useUcStyling);\n  });\n\n  container.appendChild(fragment);\n};\n\n/**\n * Create a new HTMl Element. Add this Element to the provided container.\n * @param container The container that the newly created HTML Element is embedded in.\n * @param options TCFEmbedOptions Object that contains information based on predifined attributes or the uiSettings\n * @param iabPuposes IAB Purposes (Purposes + Special Purposes), which need to be embedded\n * @param iabFeatures IAB Features (Features + Special Features), which need to be embedded\n * @param nonIabPuposes Non IAB Purposes, which need to be embedded\n * @param uiSettings TCFUISettings object that contains the labels\n */\nconst embedPurposeList = (\n  container: Element | Node,\n  options: TCFEmbedOptions,\n  tcfData: TCFData,\n  nonIabPuposes: BaseCategory[],\n  uiSettings: TCFUISettings,\n): void => {\n  const fragment = document.createDocumentFragment();\n\n  const iabPuposesHeadline = createHTMLElement(\n    'h3',\n    TcfClassNames.listHeadline,\n    [Styles.headlinesBorderBottom],\n    options.iabPurposeTitle,\n    options.useUcStyling,\n  );\n  const iabPuposesBox = createHTMLElement(\n    'div',\n    TcfClassNames.listDiv,\n    [Styles.list],\n    iabPuposesHeadline,\n    options.useUcStyling,\n  );\n  iabPuposesBox.setAttribute('data-testid', 'uc-embed-tcf-iab-purposes');\n\n  embedBasePurposeList(\n    iabPuposesBox,\n    [...tcfData.purposes, ...tcfData.specialPurposes],\n    tcfData.vendors,\n    options.useUcStyling,\n    uiSettings,\n  );\n\n  const iabFeaturesHeadline = createHTMLElement(\n    'h3',\n    TcfClassNames.listHeadline,\n    [Styles.headlinesBorderBottom],\n    uiSettings.labels.general.features,\n    options.useUcStyling,\n  );\n  const iabFeaturesBox = createHTMLElement(\n    'div',\n    TcfClassNames.listDiv,\n    [Styles.list],\n    iabFeaturesHeadline,\n    options.useUcStyling,\n  );\n  iabFeaturesBox.setAttribute('data-testid', 'uc-embed-tcf-iab-features');\n\n  embedBasePurposeList(\n    iabFeaturesBox,\n    [...tcfData.features, ...tcfData.specialFeatures],\n    tcfData.vendors,\n    options.useUcStyling,\n    uiSettings,\n  );\n\n  const nonIabPuposesHeadline = createHTMLElement(\n    'h3',\n    TcfClassNames.listHeadline,\n    [Styles.headlinesBorderBottom],\n    options.nonIabPurposeTitle,\n    options.useUcStyling,\n  );\n  const nonIabPuposesBox = createHTMLElement(\n    'div',\n    TcfClassNames.listDiv,\n    [Styles.list],\n    nonIabPuposesHeadline,\n    options.useUcStyling,\n  );\n  nonIabPuposesHeadline.setAttribute('data-testid', 'uc-embed-tcf-noniab-purpose');\n\n  embedCategoryList(nonIabPuposesBox, nonIabPuposes, options.useUcStyling, uiSettings);\n\n  fragment.appendChild(iabPuposesBox);\n  fragment.appendChild(iabFeaturesBox);\n  fragment.appendChild(nonIabPuposesBox);\n\n  container.appendChild(fragment);\n};\n\n/**\n * Embeds a single non iab Vendor aka Service into a given HTML container.\n * @param container An HTML Element to embed the non iab Vendor into.\n * @param nonIabVendor The data off the vendor aka service that is to be embedded.\n * @param useUcStyling idicates whether the predifined styling should be used\n * @param uiSettings TCFUISettings object that contains the labels\n */\nconst embedNonIabVendor = (\n  container: Element | Node,\n  nonIabVendor: Service,\n  useUcStyling: boolean,\n  uiSettings: TCFUISettings,\n): void => {\n  if (nonIabVendor.description && nonIabVendor.description !== '') {\n    embedText(\n      container,\n      true,\n      useUcStyling,\n      [nonIabVendor.description],\n      uiSettings.labels.nonTCFLabels.service.descriptionTitle,\n    );\n  }\n\n  if (nonIabVendor.processingCompany) {\n    const { name, address } = nonIabVendor.processingCompany;\n    const data = [name, address].filter((item: string) => item !== '');\n\n    if (data.length > 0) {\n      embedText(container, true, useUcStyling, data, uiSettings.labels.nonTCFLabels.service.processingCompanyTitle);\n    }\n  }\n\n  if (nonIabVendor.dataProtectionOfficer && nonIabVendor.dataProtectionOfficer !== '') {\n    embedLink(\n      container,\n      true,\n      useUcStyling,\n      isMailAddress(nonIabVendor.dataProtectionOfficer)\n        ? `mailto:${nonIabVendor.dataProtectionOfficer}`\n        : nonIabVendor.dataProtectionOfficer,\n      nonIabVendor.dataProtectionOfficer,\n      uiSettings.labels.nonTCFLabels.service.dataProtectionOfficer.title,\n      uiSettings.labels.nonTCFLabels.service.dataProtectionOfficer.description,\n    );\n  }\n\n  if (nonIabVendor.dataPurposes && nonIabVendor.dataPurposes.length > 0) {\n    embedSeries(\n      container,\n      true,\n      useUcStyling,\n      nonIabVendor.dataPurposes,\n      uiSettings.labels.nonTCFLabels.service.dataPurposes.title,\n      uiSettings.labels.nonTCFLabels.service.dataPurposes.description,\n    );\n  }\n\n  if (nonIabVendor.technologiesUsed && nonIabVendor.technologiesUsed.length > 0) {\n    embedSeries(\n      container,\n      true,\n      useUcStyling,\n      nonIabVendor.technologiesUsed,\n      uiSettings.labels.nonTCFLabels.service.technologiesUsed.title,\n      uiSettings.labels.nonTCFLabels.service.technologiesUsed.description,\n    );\n  }\n\n  if (nonIabVendor.dataCollected && nonIabVendor.dataCollected.length > 0) {\n    embedSeries(\n      container,\n      true,\n      useUcStyling,\n      nonIabVendor.dataCollected,\n      uiSettings.labels.nonTCFLabels.service.dataCollected.title,\n      uiSettings.labels.nonTCFLabels.service.dataCollected.description,\n    );\n  }\n\n  if (nonIabVendor.legalBasis && nonIabVendor.legalBasis.length > 0) {\n    const data = nonIabVendor.legalBasis.filter((item: string) => item !== '');\n\n    if (data.length > 0) {\n      embedSeries(\n        container,\n        true,\n        useUcStyling,\n        data,\n        uiSettings.labels.nonTCFLabels.service.legalBasis.title,\n        uiSettings.labels.nonTCFLabels.service.legalBasis.description,\n      );\n    }\n  }\n\n  if (nonIabVendor.dataDistribution?.processingLocation && nonIabVendor.dataDistribution.processingLocation !== '') {\n    embedText(\n      container,\n      true,\n      useUcStyling,\n      [\n        uiSettings.labels.nonTCFLabels.service.dataDistribution.processingLocationDescription,\n        nonIabVendor.dataDistribution.processingLocation,\n      ],\n      uiSettings.labels.nonTCFLabels.service.dataDistribution.processingLocationTitle,\n    );\n  }\n\n  if (nonIabVendor.retentionPeriodDescription && nonIabVendor.retentionPeriodDescription !== '') {\n    embedText(\n      container,\n      true,\n      useUcStyling,\n      [uiSettings.labels.nonTCFLabels.service.retentionPeriod.description, nonIabVendor.retentionPeriodDescription],\n      uiSettings.labels.nonTCFLabels.service.retentionPeriod.title,\n    );\n  }\n\n  if (nonIabVendor.dataDistribution?.thirdPartyCountries && nonIabVendor.dataDistribution.thirdPartyCountries !== '') {\n    embedSeries(\n      container,\n      true,\n      useUcStyling,\n      [nonIabVendor.dataDistribution.thirdPartyCountries],\n      uiSettings.labels.nonTCFLabels.service.dataDistribution.thirdPartyCountriesTitle,\n      uiSettings.labels.nonTCFLabels.service.dataDistribution.thirdPartyCountriesDescription,\n    );\n  }\n\n  if (nonIabVendor.dataRecipients && nonIabVendor.dataRecipients.length > 0) {\n    const data = nonIabVendor.dataRecipients.filter((item: string) => item !== '');\n\n    if (data.length > 0) {\n      embedSeries(\n        container,\n        true,\n        useUcStyling,\n        data,\n        uiSettings.labels.nonTCFLabels.service.dataRecipients.title,\n        uiSettings.labels.nonTCFLabels.service.dataRecipients.description,\n      );\n    }\n  }\n\n  // TODO: Add Headline\n  if (nonIabVendor.urls?.privacyPolicy) {\n    embedLink(\n      container,\n      true,\n      useUcStyling,\n      nonIabVendor.urls.privacyPolicy,\n      nonIabVendor.urls.privacyPolicy,\n      uiSettings.labels.nonTCFLabels.service.urls.privacyPolicyTitle,\n    );\n  }\n\n  // TODO: Add Headline\n  if (nonIabVendor.urls?.cookiePolicy) {\n    embedLink(\n      container,\n      true,\n      useUcStyling,\n      nonIabVendor.urls.cookiePolicy,\n      nonIabVendor.urls.cookiePolicy,\n      uiSettings.labels.nonTCFLabels.service.urls.cookiePolicyTitle,\n    );\n  }\n\n  // TODO: Add Headline\n  if (nonIabVendor.urls?.optOut) {\n    embedLink(\n      container,\n      true,\n      useUcStyling,\n      nonIabVendor.urls.optOut,\n      nonIabVendor.urls.optOut,\n      uiSettings.labels.nonTCFLabels.service.urls.optOutTitle,\n    );\n  }\n\n  embedStorageInfoSection(container, nonIabVendor, uiSettings.labels.cookieInformation, true, useUcStyling);\n\n  embedStoredInfoSection(container, nonIabVendor, uiSettings.labels.cookieInformation, true, useUcStyling);\n};\n\n/**\n * Create the expandable NON iab vendor list.\n * @param container The container in which the list is added.\n * @param nonIabVendors The non iab Vendor data --> Service.\n * @param useUcStyling idicates whether the predifined styling should be used\n * @param uiSettings TCFUISettings object that contains the labels\n */\nconst embedNonIabVendorList = (\n  container: Element | Node,\n  nonIabVendors: Service[],\n  useUcStyling: boolean,\n  uiSettings: TCFUISettings,\n): void => {\n  const fragment = document.createDocumentFragment();\n\n  nonIabVendors.forEach((service) => {\n    const vendorDataFragment = document.createDocumentFragment();\n    embedNonIabVendor(vendorDataFragment, service, useUcStyling, uiSettings);\n    embedExpandableItem(fragment, service.name, vendorDataFragment, useUcStyling);\n  });\n\n  container.appendChild(fragment);\n};\n\n/**\n * Embeds a single TCFVendor into a given HTML container.\n * @param container An HTML Element to embed the TCFVendor into.\n * @param tcfVendor The data off the vendor that is to be embedded.\n * @param useUcStyling idicates whether the predifined styling should be used\n * @param uiSettings TCFUISettings object that contains the labels\n */\nconst embedTCFVendor = (\n  container: Element | Node,\n  tcfVendor: TCFVendor,\n  useUcStyling: boolean,\n  uiSettings: TCFUISettings,\n): void => {\n  if (tcfVendor.purposes && tcfVendor.purposes.length > 0) {\n    embedSeries(\n      container,\n      true,\n      useUcStyling,\n      tcfVendor.purposes.map((purpose) => purpose.name),\n      uiSettings.labels.vendor.purposes,\n    );\n  }\n\n  if (tcfVendor.legitimateInterestPurposes && tcfVendor.legitimateInterestPurposes.length > 0) {\n    embedSeries(\n      container,\n      true,\n      useUcStyling,\n      tcfVendor.legitimateInterestPurposes.map((purpose) => purpose.name),\n      uiSettings.labels.vendor.legitimateInterest,\n    );\n  }\n\n  if (tcfVendor.specialPurposes && tcfVendor.specialPurposes.length > 0) {\n    embedSeries(\n      container,\n      true,\n      useUcStyling,\n      tcfVendor.specialPurposes.map((purpose) => purpose.name),\n      uiSettings.labels.vendor.specialPurposes,\n    );\n  }\n\n  if (tcfVendor.features && tcfVendor.features.length > 0) {\n    embedSeries(\n      container,\n      true,\n      useUcStyling,\n      tcfVendor.features.map((feature) => feature.name),\n      uiSettings.labels.vendor.features,\n    );\n  }\n\n  if (tcfVendor.specialFeatures && tcfVendor.specialFeatures.length > 0) {\n    embedSeries(\n      container,\n      true,\n      useUcStyling,\n      tcfVendor.specialFeatures.map((feature) => feature.name),\n      uiSettings.labels.vendor.specialFeatures,\n    );\n  }\n\n  if (tcfVendor.policyUrl) {\n    embedLink(\n      container,\n      true,\n      useUcStyling,\n      tcfVendor.policyUrl,\n      tcfVendor.name,\n      uiSettings.labels.vendor.privacyPolicy,\n    );\n  }\n\n  embedStorageInfoSection(container, tcfVendor, uiSettings.labels.cookieInformation, true, useUcStyling);\n\n  embedStoredInfoSection(container, tcfVendor, uiSettings.labels.cookieInformation, true, useUcStyling);\n};\n\n/**\n * Create the expandable iab vendor list.\n * @param container The container in which the list is added.\n * @param iabVendors The TCF Vendor data.\n * @param useUcStyling idicates whether the predifined styling should be used\n * @param uiSettings TCFUISettings object that contains the labels\n */\nconst embedIabVendorList = (\n  container: Element | Node,\n  iabVendors: TCFVendor[],\n  useUcStyling: boolean,\n  uiSettings: TCFUISettings,\n): void => {\n  const fragment = document.createDocumentFragment();\n\n  iabVendors.forEach((vendor) => {\n    const vendorDataFragment = document.createDocumentFragment();\n    embedTCFVendor(vendorDataFragment, vendor, useUcStyling, uiSettings);\n    embedExpandableItem(fragment, vendor.name, vendorDataFragment, useUcStyling);\n  });\n\n  container.appendChild(fragment);\n};\n\n/**\n * Create a new HTMl Element. Add this Element to the provided container.\n * @param container The container that the newly created HTML Element is embedded in.\n * @param options TCFEmbedOptions Object that contains information based on predifined attributes or the uiSettings\n * @param iabVendors IAB Vendors, which need to be embedded\n * @param nonIabVendors Non IAB Vendors, which need to be embedded\n * @param uiSettings TCFUISettings object that contains the labels\n */\nconst embedVendorList = (\n  container: Element | Node,\n  options: TCFEmbedOptions,\n  iabVendors: TCFVendor[],\n  nonIabVendors: Service[],\n  uiSettings: TCFUISettings,\n): void => {\n  const fragment = document.createDocumentFragment();\n\n  const iabVendorsHeadline = createHTMLElement(\n    'h3',\n    TcfClassNames.listHeadline,\n    [Styles.headlinesBorderBottom],\n    options.iabVendorsTitle,\n    options.useUcStyling,\n  );\n  const iabVendorsBox = createHTMLElement(\n    'div',\n    TcfClassNames.listDiv,\n    [Styles.list],\n    iabVendorsHeadline,\n    options.useUcStyling,\n  );\n  iabVendorsBox.setAttribute('data-testid', 'uc-embed-tcf-iab-vendors');\n\n  embedIabVendorList(iabVendorsBox, iabVendors, options.useUcStyling, uiSettings);\n\n  const nonIabVendorsHeadline = createHTMLElement(\n    'h3',\n    TcfClassNames.listHeadline,\n    [Styles.headlinesBorderBottom],\n    options.nonIabVendorsTitle,\n    options.useUcStyling,\n  );\n  const nonIabVendorsBox = createHTMLElement(\n    'div',\n    TcfClassNames.listDiv,\n    [Styles.list],\n    nonIabVendorsHeadline,\n    options.useUcStyling,\n  );\n  nonIabVendorsBox.setAttribute('data-testid', 'uc-embed-tcf-noniab-vendors');\n\n  embedNonIabVendorList(nonIabVendorsBox, nonIabVendors, options.useUcStyling, uiSettings);\n\n  fragment.appendChild(iabVendorsBox);\n  fragment.appendChild(nonIabVendorsBox);\n\n  container.appendChild(fragment);\n};\n\n/**\n * Embeds the List of vendors or purposes according to the specified options.\n * @param container The container that the HTML Element is embedded in.\n * @param options The embed options set by the publisher through attributes or the default fallback embed options.\n * @param tcfData The vendor, puprpose, special purpose, feature, special feature, stack and vendor data received by TCF.\n * @param nonIabVendors The non iab vendor data.\n * @param nonIabPurposes The non iab purpose data.\n * @param uiSettings TCFUISettings object that contains the labels\n */\nconst embedTCFList = (\n  container: Element | Node,\n  options: TCFEmbedOptions,\n  tcfData: TCFData,\n  nonIabVendors: Service[],\n  nonIabPurposes: BaseCategory[],\n  uiSettings: TCFUISettings,\n): void => {\n  const boxHeadline = createHTMLElement(\n    'h2',\n    TcfClassNames.headline,\n    [Styles.headlines],\n    options.embedTitle,\n    options.useUcStyling,\n  );\n  const outerBox = createHTMLElement(\n    'div',\n    TcfClassNames.outerDiv,\n    [Styles.outerBox],\n    boxHeadline,\n    options.useUcStyling,\n  );\n  outerBox.setAttribute('data-testid', 'uc-embed-tcf');\n  switch (options.embedType) {\n    case TCF_EMBEDDING_TYPE.PURPOSE:\n      embedPurposeList(outerBox, options, tcfData, nonIabPurposes, uiSettings);\n      break;\n    case TCF_EMBEDDING_TYPE.VENDOR:\n      embedVendorList(outerBox, options, tcfData.vendors, nonIabVendors, uiSettings);\n      break;\n    default:\n      embedVendorList(outerBox, options, tcfData.vendors, nonIabVendors, uiSettings);\n      break;\n  }\n  container.appendChild(outerBox);\n};\n\n/**\n * Searches the current DOM for elements with the 'uc-embed-tcf' class and embeds the specified data inside these containers.\n * @param tcfData The data source for all TCF vendors and TCF purposes that may be embedded.\n * @param nonIabVendors The data source for all the services that are not in iab aka DPS that may be embedded.\n * @param nonIabPurposes The data source for all the purposes that are not in iab aka Categories that may be embedded.\n * @param uiSettings TCFUISettings object that contains the labels\n * @param containers DOM elements with the 'uc-embed-tcf' class\n */\nexport const embedTCF = (\n  tcfData: TCFData,\n  nonIabVendors: Service[],\n  nonIabPurposes: BaseCategory[],\n  uiSettings: TCFUISettings,\n  containers: Element[],\n): void => {\n  containers.forEach((container) => {\n    reset(container);\n    const embedOptions = extractTcfEmbedOptions(container, uiSettings);\n    embedTCFList(container, embedOptions, tcfData, nonIabVendors, nonIabPurposes, uiSettings);\n  });\n};\n"],"names":["embedBlockSeries","fragment","itemNames","useUcStyling","viewMoreFunction","buttonText","headline","list","createHTMLElement","TcfClassNames","subElementBlockList","subElementItemList","TcfStyles","map","item","subElementBlockListElement","Classnames","subElementItemListElement","button","viewMoreButton","addEventListener","appendChild","subElement","Styles","getTitle","embedCategoryList","container","categories","uiSettings","document","createDocumentFragment","forEach","category","categoryDataFragment","description","embedText","services","length","s","name","window","UC_UI_GLOBAL_NAMESPACE","_window$UC_UI_GLOBAL_","showSecondLayer","labels","nonTCFLabels","general","showMore","embedCategory","embedExpandableItem","label","embedBasePurposeList","basePurposes","iabVendors","basePurpose","purposeDataFragment","vendors","legalDescriptions","getFormatedLegalDescription","descriptionLegal","embedSeries","bulletPoints","title","_window$UC_UI_GLOBAL_2","secondLayer","tabs","embedTCFBasePurpose","filter","v","purposes","idName","id","slice","MAX_LIST_SIZE_IN_SUBLIST","embedNonIabVendorList","nonIabVendors","service","vendorDataFragment","nonIabVendor","descriptionTitle","processingCompany","address","data","processingCompanyTitle","dataProtectionOfficer","embedLink","isMailAddress","dataPurposes","technologiesUsed","dataCollected","legalBasis","dataDistribution","processingLocation","processingLocationDescription","processingLocationTitle","retentionPeriodDescription","retentionPeriod","thirdPartyCountries","thirdPartyCountriesTitle","thirdPartyCountriesDescription","dataRecipients","urls","_nonIabVendor$urls","privacyPolicy","privacyPolicyTitle","_nonIabVendor$urls2","cookiePolicy","cookiePolicyTitle","_nonIabVendor$urls3","optOut","optOutTitle","embedStorageInfoSection","cookieInformation","embedStoredInfoSection","embedNonIabVendor","embedIabVendorList","vendor","tcfVendor","purpose","legitimateInterestPurposes","legitimateInterest","specialPurposes","features","feature","specialFeatures","policyUrl","embedTCFVendor","embedVendorList","options","iabVendorsHeadline","listHeadline","headlinesBorderBottom","iabVendorsTitle","iabVendorsBox","listDiv","setAttribute","nonIabVendorsHeadline","nonIabVendorsTitle","nonIabVendorsBox","embedTCFList","tcfData","nonIabPurposes","boxHeadline","headlines","embedTitle","outerBox","outerDiv","embedType","TCF_EMBEDDING_TYPE","PURPOSE","nonIabPuposes","iabPuposesHeadline","iabPurposeTitle","iabPuposesBox","iabFeaturesHeadline","iabFeaturesBox","nonIabPuposesHeadline","nonIabPurposeTitle","nonIabPuposesBox","embedPurposeList","VENDOR","embedTCF","containers","reset","embedOptions","extractTcfEmbedOptions"],"mappings":"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"}