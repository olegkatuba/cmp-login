{"version":3,"file":"DefaultTabs-2798014b.js","sources":["../src/components/CategoriesList/CategoriesList.tsx","../src/components/ServicesList/ServicesList.tsx","../src/views/Default/DefaultTabs.tsx"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport { Category, Service, TCFUISettings } from '@usercentrics/cmp-browser-sdk';\nimport { ComponentChild, FunctionalComponent, h } from 'preact';\n\nimport { forwardRef, memo } from 'preact/compat';\nimport MapCategories from '../CategoryHandler/MapCategories';\nimport { VIEW } from '../../enums';\nimport VirtualCategoryItem from '../VirtualList/VirtualCategoryItem';\nimport { VirtualChildContainer } from '../VirtualList/VirtualList.style';\nimport VirtualList from '../VirtualList';\nimport { getItemStyle } from '../VirtualList/helpers';\nimport { useCategoryContext } from '../../contexts/CategoryContext';\nimport { useEffect } from 'preact/hooks';\nimport { useSettingsContext } from '../../contexts/SettingsContext';\nimport { useUiContext } from '../../contexts/UiContext';\nimport { useVirtualList } from '../../hooks';\n\nconst LIST_TOP_SPACE = 1;\n\nexport type CategoryProps = {\n  category: Category;\n  checked: boolean;\n  onCategoryToggle: () => void;\n  onServiceToggle: (service: Service) => void;\n};\n\ntype Props = {\n  isVisible: boolean;\n  showServicesToggles: boolean;\n};\n\nconst CategoriesList: FunctionalComponent<Props> = forwardRef<HTMLDivElement, Props>(\n  ({ isVisible, showServicesToggles = true }, virtualListRef) => {\n    const categories = MapCategories(useCategoryContext());\n    const itemCount = categories.length + LIST_TOP_SPACE;\n    const { getItemSize, setItemSize } = useVirtualList(itemCount, 50);\n    const { clearCategoryPurposeScrollToId, scrollToIdTabViewCategoryPurpose, previousView } = useUiContext();\n    const { settings } = useSettingsContext();\n    const ui = settings.ui as TCFUISettings;\n\n    // Clears the scroll to index to avoid jumping back on it after the component rendered\n    useEffect(() => {\n      if (isVisible) {\n        clearCategoryPurposeScrollToId();\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isVisible]);\n\n    const getScrollIndexForSlug = (): number => {\n      if (scrollToIdTabViewCategoryPurpose && typeof scrollToIdTabViewCategoryPurpose === 'string') {\n        const index = categories.findIndex(\n          (categoryProp) => categoryProp.category.slug === scrollToIdTabViewCategoryPurpose,\n        );\n\n        // index found --> return correct whole list index by adding static Placeholder in the top of the list\n        if (index >= 0) {\n          return index + LIST_TOP_SPACE;\n        }\n      }\n\n      return -1;\n    };\n\n    // Do not keep previous scroll - If previousView was First Layer we reset the list scroll position.\n    const addScroll = previousView !== VIEW.FIRST_LAYER && scrollToIdTabViewCategoryPurpose;\n\n    return (\n      <VirtualList\n        data-testid=\"uc-virtual-list\"\n        ref={virtualListRef}\n        estimatedItemSize={50}\n        isVisible={isVisible}\n        itemCount={itemCount}\n        itemSize={getItemSize}\n        {...(addScroll && { scrollToIndex: getScrollIndexForSlug() })}\n        renderItem={({ index, style }): ComponentChild => (\n          <VirtualChildContainer key={index} style={getItemStyle(style)}>\n            <VirtualCategoryItem\n              data-testid={`uc-virtual-list-item-${index}`}\n              categories={categories}\n              getItemSize={getItemSize}\n              hasTopSpace\n              index={index}\n              id={index}\n              {...(addScroll && { scrollToId: scrollToIdTabViewCategoryPurpose })}\n              setItemSize={setItemSize}\n              showToggles={!ui.secondLayer.hideToggles}\n              showServicesToggles={showServicesToggles}\n            />\n          </VirtualChildContainer>\n        )}\n        width=\"100%\"\n      />\n    );\n  },\n);\n\nexport default memo(CategoriesList);\n","/* eslint-disable react/jsx-wrap-multilines */\n/* eslint-disable react/jsx-props-no-spreading */\nimport { ComponentChild, FunctionalComponent, h } from 'preact';\nimport { ListContainer, ListWrapper } from '../List';\nimport { areServicesFull, useCategoryContext } from '../../contexts/CategoryContext';\nimport { forwardRef, memo } from 'preact/compat';\nimport ControllerIdItem from '../ControllerIdItem';\nimport MapServices from '../ServiceHandler/MapServices';\nimport SubServiceDetail from '../SubServices/SubServiceDetail';\nimport { SubServicesWrapper } from '../SubServices/SubServices.styles';\nimport { VirtualChildContainer } from '../VirtualList/VirtualList.style';\nimport VirtualList from '../VirtualList';\nimport VirtualServiceItem from '../VirtualList/VirtualServiceItem';\nimport { getItemStyle } from '../VirtualList/helpers';\nimport { useEffect } from 'preact/hooks';\nimport { useSubService } from '../../hooks/useSubService';\nimport { useUiContext } from '../../contexts/UiContext';\nimport { useVirtualList } from '../../hooks';\n\nconst CONTROLLER_ID_ITEM = 1;\nconst LIST_TOP_SPACE = 1;\n\ntype Props = {\n  controllerIdLabel: string;\n  isVisible: boolean;\n  showServicesToggles: boolean;\n  title?: string;\n};\n\nconst ServicesList: FunctionalComponent<Props> = forwardRef<HTMLDivElement, Props>(\n  ({ controllerIdLabel, isVisible, showServicesToggles = true, title }, virtualListRef) => {\n    const { categories, onServiceToggle, services } = MapServices(useCategoryContext());\n    const servicesCount = services.length + CONTROLLER_ID_ITEM + LIST_TOP_SPACE;\n    const itemCount = title == null ? servicesCount : servicesCount + 1;\n    const { getItemSize, setItemSize } = useVirtualList(itemCount, 50);\n    const { clearServiceVendorScrollToId, scrollToIdTabViewServiceVendors } = useUiContext();\n    const { onCloseSubServiceDetail, onOpenSubServiceDetail, selectedSubService } = useSubService();\n\n    // Clears the scroll to index to avoid jumping back on it after the component rendered\n    useEffect(() => {\n      if (isVisible) {\n        onCloseSubServiceDetail();\n        clearServiceVendorScrollToId();\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isVisible]);\n\n    const getScrollIndexForId = (): number => {\n      if (scrollToIdTabViewServiceVendors && typeof scrollToIdTabViewServiceVendors === 'string') {\n        const index = services.findIndex((service) => service.id === scrollToIdTabViewServiceVendors);\n\n        // index found --> return correct whole list index by adding static Placeholder in the top of the list\n        if (index >= 0) {\n          return index + LIST_TOP_SPACE;\n        }\n      }\n\n      return -1;\n    };\n\n    const renderItem = (index: number): ComponentChild => {\n      // always render controllerID in the last position of the list\n      if (index === itemCount - 1) {\n        return <ControllerIdItem label={controllerIdLabel} />;\n      }\n\n      if (areServicesFull(services)) {\n        return (\n          <VirtualServiceItem\n            categories={categories}\n            hideToggle={!showServicesToggles}\n            hasTopSpace\n            index={index}\n            id={index}\n            onOpenSubServiceDetail={onOpenSubServiceDetail}\n            onToggleService={onServiceToggle}\n            getItemSize={getItemSize}\n            setItemSize={setItemSize}\n            services={services}\n            title={title}\n            {...(scrollToIdTabViewServiceVendors && { scrollToId: scrollToIdTabViewServiceVendors })}\n          />\n        );\n      }\n\n      return null;\n    };\n\n    return (\n      <ListContainer>\n        <ListWrapper>\n          <VirtualList\n            data-testid=\"uc-virtual-list\"\n            ref={virtualListRef}\n            estimatedItemSize={50}\n            isVisible={isVisible}\n            itemCount={itemCount}\n            itemSize={getItemSize}\n            {...(scrollToIdTabViewServiceVendors && { scrollToIndex: getScrollIndexForId() })}\n            renderItem={({ index, style }): ComponentChild => (\n              <VirtualChildContainer\n                data-testid={`uc-virtual-list-item-${index}`}\n                key={index}\n                style={getItemStyle(style)}\n              >\n                {renderItem(index)}\n              </VirtualChildContainer>\n            )}\n            width=\"100%\"\n          />\n        </ListWrapper>\n        {selectedSubService && (\n          <SubServicesWrapper>\n            <SubServiceDetail subService={selectedSubService} onCloseDetail={onCloseSubServiceDetail} />\n          </SubServicesWrapper>\n        )}\n      </ListContainer>\n    );\n  },\n);\n\nexport default memo(ServicesList);\n","/* eslint-disable react/jsx-props-no-spreading */\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Tab, TabList, TabPanel, useTabs } from '../../components/Tabs';\nimport CategoriesList from '../../components/CategoriesList';\nimport { DefaultUISettings } from '@usercentrics/cmp-browser-sdk';\nimport ServicesList from '../../components/ServicesList';\nimport { TAB_VIEW } from '../../enums/Tabs';\nimport { memo } from 'preact/compat';\nimport { useEffect } from 'preact/hooks';\nimport { useMobileScroll } from '../../hooks';\nimport { useSettingsContext } from '../../contexts/SettingsContext';\n\nconst DefaultTabs: FunctionalComponent = memo(() => {\n  const { settings } = useSettingsContext();\n  const { selected, select } = useTabs();\n  const ui = settings.ui as DefaultUISettings;\n\n  const initialTab = TAB_VIEW.CATEGORIES_PURPOSES;\n  const [firstTabRef, secondTabRef, stickyRef] = useMobileScroll(selected, true);\n\n  useEffect(() => {\n    if (!selected) {\n      select(initialTab);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <Fragment>\n      <TabList ariaLabel=\"SettingsTabs\" ref={stickyRef}>\n        <Tab\n          testid=\"uc-tab-categories\"\n          forPanel={TAB_VIEW.CATEGORIES_PURPOSES}\n          ariaLabel={`${ui.secondLayer.tabs.categories.label} ${ui.ariaLabels.tabButton}`}\n        >\n          {ui.secondLayer.tabs.categories.label}\n        </Tab>\n        <Tab\n          testid=\"uc-tab-services\"\n          forPanel={TAB_VIEW.SERVICES_VENDORS}\n          ariaLabel={`${ui.secondLayer.tabs.services.label} ${ui.ariaLabels.tabButton}`}\n        >\n          {ui.secondLayer.tabs.services.label}\n        </Tab>\n      </TabList>\n      <Fragment>\n        <TabPanel id={TAB_VIEW.CATEGORIES_PURPOSES} testid=\"uc-panel-categories\">\n          <CategoriesList\n            ref={firstTabRef}\n            isVisible={selected === TAB_VIEW.CATEGORIES_PURPOSES}\n            showServicesToggles={ui.secondLayer.showTogglesForServices}\n          />\n        </TabPanel>\n        <TabPanel id={TAB_VIEW.SERVICES_VENDORS} testid=\"uc-panel-services\">\n          <ServicesList\n            ref={secondTabRef}\n            controllerIdLabel={ui.labels.general.controllerId}\n            isVisible={selected === TAB_VIEW.SERVICES_VENDORS}\n            showServicesToggles={ui.secondLayer.showTogglesForServices}\n          />\n        </TabPanel>\n      </Fragment>\n    </Fragment>\n  );\n});\n\nexport default DefaultTabs;\n"],"names":["memo","forwardRef","isVisible","showServicesToggles","virtualListRef","categories","MapCategories","useCategoryContext","itemCount","length","getItemSize","setItemSize","useVirtualList","clearCategoryPurposeScrollToId","scrollToIdTabViewCategoryPurpose","previousView","useUiContext","settings","useSettingsContext","ui","useEffect","addScroll","VIEW","FIRST_LAYER","h","VirtualList","ref","estimatedItemSize","itemSize","scrollToIndex","index","findIndex","categoryProp","category","slug","getScrollIndexForSlug","renderItem","style","VirtualChildContainer","key","getItemStyle","VirtualCategoryItem","hasTopSpace","id","scrollToId","showToggles","secondLayer","hideToggles","width","controllerIdLabel","title","onServiceToggle","services","MapServices","servicesCount","clearServiceVendorScrollToId","scrollToIdTabViewServiceVendors","onCloseSubServiceDetail","onOpenSubServiceDetail","selectedSubService","useSubService","ListContainer","ListWrapper","service","getScrollIndexForId","ControllerIdItem","label","areServicesFull","VirtualServiceItem","hideToggle","onToggleService","SubServicesWrapper","SubServiceDetail","subService","onCloseDetail","DefaultTabs","selected","select","useTabs","initialTab","TAB_VIEW","CATEGORIES_PURPOSES","firstTabRef","secondTabRef","stickyRef","useMobileScroll","Fragment","TabList","ariaLabel","Tab","testid","forPanel","tabs","ariaLabels","tabButton","SERVICES_VENDORS","TabPanel","CategoriesList","showTogglesForServices","ServicesList","labels","general","controllerId"],"mappings":"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"}