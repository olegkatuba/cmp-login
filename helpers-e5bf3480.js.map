{"version":3,"file":"helpers-e5bf3480.js","sources":["../src/embeddings/essentials.ts","../src/embeddings/interfaces.ts","../src/embeddings/helpers.ts"],"sourcesContent":["const Color = {\n  blue: '#0000ff',\n  darkGray: '#848484',\n  lightGray: '#e2e2e2',\n};\n\nexport const Classnames = {\n  collapseContent: 'uc-embed-collapse-content',\n  collapsedArrow: 'uc-embed-collapsed-arrow',\n  collapsedButton: 'uc-embed-collapsed-button',\n  collapsedButtonContent: 'uc-embed-collapsed-button-content',\n  collapsedLink: 'uc-embed-collapsed-link',\n  collapsedLinkContent: 'uc-embed-collapsed-link-content',\n  listItem: 'uc-embed-list-item',\n  listItemContent: 'uc-embed-list-item-content',\n  listItemHeadline: 'uc-embed-list-item-headline',\n  openedArrow: 'uc-embed-opened-arrow',\n  openedButton: 'uc-embed-opened-button',\n  openedButtonContent: 'uc-embed-opened-button-content',\n  openedLink: 'uc-embed-opened-link',\n  openedLinkContent: 'uc-embed-opened-link-content',\n  storedInfoAction: 'uc-embed-stored-info-action',\n  storedInfoActionItem: 'uc-embed-stored-info-action-item',\n  storedInfoItem: 'uc-embed-stored-info-item',\n  storedInfoItemData: 'uc-embed-stored-info-item-data',\n  storedInfoItemDataElement: 'uc-embed-stored-info-item-data-element',\n  storedInfoItemHeadline: 'uc-embed-stored-info-item-headline',\n  subElement: 'uc-embed-subelement',\n  subElementItemListElement: 'uc-embed-subelement-item-list-element',\n  subElementStoredInfo: 'uc-embed-subelement-stored-info',\n};\n\nexport const Styles = {\n  collapsableButton: {\n    style:\n      'border: none; display: inline-flex; background-color: white; text-align: left; padding: 15px; justify-content: space-between; width:100%',\n  },\n  collapsableDiv: {\n    style: `border-bottom: 1px solid ${Color.lightGray}`,\n  },\n  collapsableDivContentHidden: {\n    style: 'display: none',\n  },\n  collapsableDivContentShown: {\n    style: 'display: inline-block; padding-bottom: 15px; width: 100%',\n  },\n  collapsableLink: {\n    style:\n      'border: none; display: inline-flex; background-color: white; text-align: left; padding: 7px 15px; margin: 0px; width:100%; justify-content: flex-start',\n  },\n  collapsedArrow: {\n    style: `border: solid ${Color.darkGray}; border-width: 0 1px 1px 0; display: inline-block; padding: 3px; height: 0px; margin-top: 4px; margin-left:10px; transform: rotate(45deg); -webkit-transform: rotate(45deg);`,\n  },\n  collapsedButtonContent: {\n    style: 'display: inline-block; font-weight: normal; font-size: 1.17em; margin: 0;',\n  },\n  collapsedLinkArrow: {\n    style: `border: solid ${Color.blue}; border-width: 0 1px 1px 0; display: inline-block; padding: 3px; height: 0px; margin-top: 4px; margin-left:10px; transform: rotate(45deg); -webkit-transform: rotate(45deg);`,\n  },\n  collapsedLinkContent: {\n    style: `display: inline-block; font-weight: bold; font-size: 1.0em; color: ${Color.blue}; margin-top: 1px`,\n  },\n  flexContainer: {\n    style: 'display: flex',\n  },\n  headlines: {\n    style: 'padding: 7px 15px; margin: 0px',\n  },\n  headlinesBorderBottom: {\n    style: `padding: 30px 15px 20px; margin: 0px; border-bottom: 1px solid ${Color.lightGray}`,\n  },\n  link: {\n    style: 'font-size: 12px; padding: 0px 15px; text-decoration: none',\n  },\n  list: {\n    style: 'display: inline-grid',\n  },\n  openedArrow: {\n    style: `border: solid ${Color.darkGray}; border-width: 0 1px 1px 0; display: inline-block; padding: 3px; height: 0px; margin-top: 7px; margin-left:10px; transform: rotate(-135deg); -webkit-transform: rotate(-135deg);`,\n  },\n  openedButtonContent: {\n    style: 'display: inline-block; font-weight: bold; font-size: 1.17em; margin: 0;',\n  },\n  openedLinkArrow: {\n    style: `border: solid ${Color.blue}; border-width: 0 1px 1px 0; display: inline-block; padding: 3px; height: 0px; margin-top: 7px; margin-left:10px; transform: rotate(-135deg); -webkit-transform: rotate(-135deg);`,\n  },\n  outerBox: {\n    style: 'display: grid; padding: 20px 0px; background-color: white; border-radius: 10px; font-family: \"Arial\"',\n  },\n  storedInfoAction: {\n    style: 'display: flex; flex-direction: row; justify-content: center; width: 100%;',\n  },\n  storedInfoActionLink: {\n    style: `font-size: 14px; margin: 0; cursor: pointer; color: ${Color.blue}`,\n  },\n  storedInfoActionText: {\n    style: 'font-size: 14px; margin: 0',\n  },\n  storedInfoItem: {\n    style: `display: flex; flex-direction: column; padding: 12px; border: 1px solid ${Color.lightGray};`,\n  },\n  storedInfoItemDescription: {\n    style: `font-size: 12px; font-weight: bold; margin: 8px 0px 0px;`,\n  },\n  storedInfoItemElement: {\n    style: 'display: flex; flex-direction: row; width: 100%; font-size: 12px; margin: 12px 0px 0px;',\n  },\n  storedInfoItemHeader: {\n    style: `font-size: 12px; font-weight: bold; margin: 0;`,\n  },\n  storedInfoItemSubElement: {\n    style: 'flex: 0.33; margin: 0',\n  },\n  subElement: {\n    style: 'margin: 5px 0px 15px',\n  },\n  subElementDescription: {\n    style: 'font-size: 12px; padding: 0px 15px; margin: 5px 0px 0px',\n  },\n  subElementExpandableLink: {\n    style: 'margin: 5px 15px 15px; width: calc(100% - 30px)',\n  },\n  subElementItemList: {\n    style: 'margin: 5px 0px 10px; padding-right: 15px',\n  },\n  subElementItemListElement: {\n    style: 'font-size: 12px; padding: 7px 0px 5px 0px',\n  },\n};\n","export enum GDPR_EMBEDDING_SECTIONS {\n  DATA_COLLECTED = 'dataCollected',\n  DATA_PROTECTION_OFFICER = 'dataProtectionOfficer',\n  DATA_PURPOSES = 'dataPurposes',\n  DATA_RECIPIENTS = 'dataRecipients',\n  DESCRIPTION = 'description',\n  FURTHER_INFORMATION = 'furtherInformation',\n  LEGAL_BASIS = 'legalBasis',\n  OPT_IN_CHECKBOX_WITH_LABEL = 'optInCheckboxWithLabel',\n  PROCESSING_LOCATION = 'processingLocation',\n  PROCESSOR_NAMES = 'processorNames',\n  RETENTION_PERIOD = 'retentionPeriod',\n  TECHNOLOGIES_USED = 'technologiesUsed',\n  THIRD_COUNTRY_TRANSFER = 'thirdCountryTransfer',\n}\n\nexport enum GDPR_EMBEDDING_TYPE {\n  ALL = 'all',\n  CATEGORY = 'category',\n}\n\nexport enum TCF_EMBEDDING_TYPE {\n  VENDOR = 'vendor',\n  PURPOSE = 'purpose',\n}\n\nexport type Content = Element | Node | string | Element[] | Node[];\n\nexport type GDPREmbedOptions = {\n  embedService: string;\n  embedTitle: string;\n  embedType: GDPR_EMBEDDING_TYPE;\n  sections: GDPR_EMBEDDING_SECTIONS[];\n  showToggle: boolean;\n  useUcStyling: boolean;\n};\n\nexport type TCFEmbedOptions = {\n  embedTitle: string;\n  embedType: TCF_EMBEDDING_TYPE;\n  iabPurposeTitle: string;\n  iabVendorsTitle: string;\n  nonIabPurposeTitle: string;\n  nonIabVendorsTitle: string;\n  useUcStyling: boolean;\n};\n","import { Classnames, Styles } from './essentials';\nimport {\n  Content,\n  GDPREmbedOptions,\n  GDPR_EMBEDDING_SECTIONS,\n  GDPR_EMBEDDING_TYPE,\n  TCFEmbedOptions,\n  TCF_EMBEDDING_TYPE,\n} from './interfaces';\nimport {\n  CookieInformationLabels,\n  DeviceStorage,\n  Service,\n  TCFUISettings,\n  TCFVendor,\n} from '@usercentrics/cmp-browser-sdk';\nimport { EmbedSettingNames, Classnames as TcfClassNames } from './tcfEssentials';\nimport {\n  EmbedSettingNames as EmbedSettingNamesGDPR,\n  Classnames as GdprEssentials,\n  Styles as GdprStyles,\n  getDisabledIcon,\n  getOffIcon,\n  getOnIcon,\n} from './gdprEssentials';\nimport { convertCookieMaxAge, convertDomain, fetchUrl } from '../components/StorageInfo/helpers';\nimport { JSX } from 'preact';\nimport { UC_UI_GLOBAL_NAMESPACE } from '../constants';\nimport { nullishOperation } from '../App.helpers';\nimport { v4 as uuid4 } from 'uuid';\n\nexport const MAX_LIST_SIZE_IN_SUBLIST = 5;\n\n/**\n * Extract sections to be included on GDPR services.\n * @param container HTML Element.\n */\nconst getGdprSections = (container: Element): GDPR_EMBEDDING_SECTIONS[] => {\n  const optionsString = container.getAttribute(EmbedSettingNamesGDPR.embeddingOptionsAttributeName);\n\n  if (!optionsString || optionsString.includes(EmbedSettingNamesGDPR.embeddingShowAllOptions)) {\n    return Object.values(GDPR_EMBEDDING_SECTIONS);\n  }\n\n  const options = optionsString.replace(' ', '').split(',');\n\n  return Object.values(GDPR_EMBEDDING_SECTIONS).filter((embedding) => options.includes(embedding));\n};\n\n/**\n * Extract options from the attributes of an HTML element.\n * @param container HTML Element.\n * @param servicesLabel Label for styled services.\n */\nexport const extractGdprEmbedOptions = (container: Element, servicesLabel: string): GDPREmbedOptions => {\n  const serviceName = nullishOperation(\n    container.getAttribute(EmbedSettingNamesGDPR.embeddingServiceAttributeName),\n    EmbedSettingNamesGDPR.embeddingShowAllServices,\n  );\n\n  const sections = getGdprSections(container);\n\n  const embedTitle = nullishOperation(container.getAttribute(EmbedSettingNamesGDPR.embeddingTitle), servicesLabel);\n\n  const embedType =\n    container.getAttribute(EmbedSettingNamesGDPR.embeddingStyle) === GDPR_EMBEDDING_TYPE.CATEGORY\n      ? GDPR_EMBEDDING_TYPE.CATEGORY\n      : GDPR_EMBEDDING_TYPE.ALL;\n\n  const showToggle = nullishOperation(container.getAttribute(EmbedSettingNamesGDPR.embeddingShowToggle), 'false');\n  const useUcStyling = nullishOperation(container.getAttribute(EmbedSettingNamesGDPR.embeddingUseStyling), 'false');\n\n  return {\n    embedService: serviceName,\n    embedTitle,\n    embedType,\n    sections,\n    showToggle: showToggle === 'true',\n    useUcStyling: useUcStyling === 'true',\n  };\n};\n\n/**\n * Extract options from the attributes of an HTML element.\n * @param container HTML Element that holds the attributes.\n * @param uiSettings TCFUISettings object that contains the labels\n */\nexport const extractTcfEmbedOptions = (container: Element, { labels, secondLayer }: TCFUISettings): TCFEmbedOptions => {\n  const embedType =\n    container.getAttribute(EmbedSettingNames.embedType) === TCF_EMBEDDING_TYPE.PURPOSE\n      ? TCF_EMBEDDING_TYPE.PURPOSE\n      : TCF_EMBEDDING_TYPE.VENDOR;\n\n  const embedTitle =\n    container.getAttribute(EmbedSettingNames.embedTitle) ||\n    (embedType === TCF_EMBEDDING_TYPE.PURPOSE ? secondLayer.tabs.purposes.label : secondLayer.tabs.vendors.label);\n\n  const iabVendorsTitle = container.getAttribute(EmbedSettingNames.iabVendorsTitle) || labels.general.iabVendors;\n\n  const nonIabVendorsTitle =\n    container.getAttribute(EmbedSettingNames.nonIabVendorsTitle) || labels.general.nonIabVendors;\n\n  const iabPurposeTitle = container.getAttribute(EmbedSettingNames.iabPurposeTitle) || labels.general.purposes;\n\n  const nonIabPurposeTitle =\n    container.getAttribute(EmbedSettingNames.nonIabPurposeTitle) || labels.general.nonIabPurposes;\n\n  const useUcStyling = container.getAttribute(EmbedSettingNames.useUcStylining);\n\n  return {\n    embedTitle,\n    embedType,\n    iabPurposeTitle,\n    iabVendorsTitle,\n    nonIabPurposeTitle,\n    nonIabVendorsTitle,\n    useUcStyling: useUcStyling !== 'false',\n  };\n};\n\n/**\n * Remove all children from an HTML Element.\n * @param container An HTML Element.\n */\nexport const reset = (container: Element): void => {\n  while (container.lastElementChild) {\n    container.removeChild(container.lastElementChild);\n  }\n};\n\n/**\n * Set attributes for a HTML Element.\n * @param container An HTML Element.\n * @param attributes A key/value pair of attributes to apply.\n */\nconst setAttributes = (container: HTMLElement, ...attributes: JSX.HTMLAttributes[]): void => {\n  attributes.forEach((attribute) => {\n    Object.entries(attribute).forEach(([key, value]) => {\n      container.setAttribute(key, value);\n    });\n  });\n};\n\n/**\n * Create a new HTMl Element with the specified tag, className and content and returns it.\n * @param tag The type of the newly created HTML Element.\n * @param className The class name of the newly created HTML Element.\n * @param attributes A key/value pair of attributes to apply.\n * @param content Optional. Child elements for the newly created element\n * @param useUcStyling idicates whether the predifined styling should be used.\n */\nexport const createHTMLElement = <T extends HTMLElement>(\n  tag: string,\n  className?: string | null,\n  attributes?: JSX.HTMLAttributes[],\n  content: Content = [],\n  useUcStyling = false,\n): T => {\n  const newElement = document.createElement(tag);\n\n  if (className && className !== '') newElement.className = className;\n\n  if (attributes && attributes.length > 0) {\n    attributes.forEach((a) => {\n      if (!a.style || (a.style && useUcStyling)) {\n        setAttributes(newElement, a);\n      }\n    });\n  }\n\n  if (content) {\n    if (typeof content === 'string') {\n      newElement.innerText = content;\n    } else if (Array.isArray(content)) {\n      const fragment = document.createDocumentFragment();\n      content.forEach((c) => fragment.appendChild(c));\n      newElement.appendChild(fragment);\n    } else {\n      newElement.appendChild(content);\n    }\n  }\n\n  return newElement as T;\n};\n\n/**\n * Create a new HTMl Header with the specified content and className and returns it.\n * @param headline the header text\n * @param isTCF indicates whether the current variant is TCF\n * @param useUcStyling idicates whether the predifined styling should be used\n * @param nonTcfClassName the class name to be used for non-tcf variants\n */\nexport const getTitle = (\n  headline: string,\n  isTCF: boolean,\n  useUcStyling: boolean,\n  nonTcfClassName?: string | null,\n): HTMLElement => {\n  const tag = !useUcStyling && !isTCF ? 'h4' : 'h5';\n\n  return createHTMLElement(\n    tag,\n    isTCF ? TcfClassNames.subElementHeadline : `uc uc-heading ${nonTcfClassName}`,\n    [Styles.headlines],\n    headline,\n    useUcStyling,\n  );\n};\n\n/**\n * Create a new HTMl Paragraph with the specified content and className and returns it.\n * @param description the paragraph text\n * @param isTCF indicates whether the current variant is TCF\n * @param useUcStyling idicates whether the predifined styling should be used\n * @param nonTcfClassName the class name to be used for non-tcf variants\n */\nconst getDescription = (\n  description: string,\n  isTCF: boolean,\n  useUcStyling: boolean,\n  nonTcfClassName?: string | null,\n): HTMLElement => {\n  return createHTMLElement(\n    'p',\n    isTCF ? TcfClassNames.subElementDescription : `uc uc-p ${nonTcfClassName}`,\n    [Styles.subElementDescription],\n    description,\n    useUcStyling,\n  );\n};\n\n/**\n * Embeds a HTML element into a given HTML container.\n * @param container An HTML Element to embed the element into.\n * @param isTCF indicates whether the current variant is TCF\n * @param useUcStyling idicates whether the predifined styling should be used\n * @param headline optional headline of the section.\n * @param description multiple descriptions added line by line. Added after the headline\n * @param element An HTML Element to be embed.\n * @param nonTcfClassName the class name to be used for non-tcf variants\n */\nconst embedSubElement = (\n  container: Element | Node,\n  isTCF: boolean,\n  useUcStyling: boolean,\n  headline: string,\n  description?: string | null,\n  element?: HTMLElement,\n  nonTcfClassName?: string | null,\n): void => {\n  container.appendChild(\n    createHTMLElement(\n      'div',\n      Classnames.subElement,\n      [Styles.subElement],\n      [\n        ...(headline ? [getTitle(headline, isTCF, useUcStyling, nonTcfClassName)] : []),\n        ...(description ? [getDescription(description, isTCF, useUcStyling, nonTcfClassName)] : []),\n        ...(element ? [element] : []),\n      ],\n      useUcStyling,\n    ),\n  );\n};\n\n/**\n * Embeds a Text element into a given HTML container.\n * @param container An HTML Element to embed the text element into.\n * @param isTCF indicates whether the current variant is TCF\n * @param useUcStyling idicates whether the predifined styling should be used\n * @param descriptions multiple descriptions added line by line. Added after the headline\n * @param headline optional headline of the section.\n * @param nonTcfClassName the class name to be used for non-tcf variants\n */\nexport const embedText = (\n  container: Element | Node,\n  isTCF: boolean,\n  useUcStyling: boolean,\n  descriptions: string[],\n  headline?: string,\n  nonTcfClassName?: string,\n): void => {\n  if (descriptions.length > 0) {\n    container.appendChild(\n      createHTMLElement(\n        'div',\n        Classnames.subElement,\n        [Styles.subElement],\n        [\n          ...(headline ? [getTitle(headline, isTCF, useUcStyling, nonTcfClassName)] : []),\n          ...descriptions.map((description) => {\n            return getDescription(description, isTCF, useUcStyling, nonTcfClassName);\n          }),\n        ],\n        useUcStyling,\n      ),\n    );\n  }\n};\n\n/**\n * Embeds a Link element into a given HTML container.\n * @param container An HTML Element to embed the link element into.\n * @param isTCF indicates whether the current variant is TCF\n * @param useUcStyling idicates whether the predifined styling should be used\n * @param link The link to be embedded.\n * @param linkText The Text to be displayed for the link.\n * @param headline The headline of the link.\n * @param description optional description. Added after the headline\n * @param nonTcfClassName the class name to be used for non-tcf variants\n */\nexport const embedLink = (\n  container: Element | Node,\n  isTCF: boolean,\n  useUcStyling: boolean,\n  link: string,\n  linkText: string,\n  headline: string,\n  description?: string | null,\n  nonTcfClassName?: string,\n): void => {\n  const linkElement = createHTMLElement(\n    'a',\n    isTCF ? TcfClassNames.link : `uc uc-a ${nonTcfClassName}`,\n    [{ href: link }, Styles.link],\n    linkText,\n    useUcStyling,\n  );\n  embedSubElement(container, isTCF, useUcStyling, headline, description, linkElement, nonTcfClassName);\n};\n\n/**\n * Embeds a series of items into a given HTML container.\n * @param container An HTML Element to embed the series into.\n * @param isTCF indicates whether the current variant is TCF\n * @param useUcStyling idicates whether the predifined styling should be used\n * @param items The items of the series to be embedded.\n * @param headline The headline of the series to be embedded.\n * @param description optional description. Added after the headline\n * @param nonTcfClassName the class name to be used for non-tcf variants\n */\nexport const embedSeries = (\n  container: Element | Node,\n  isTCF: boolean,\n  useUcStyling: boolean,\n  items: string[],\n  headline: string,\n  description?: string | null,\n  nonTcfClassName?: string | null,\n): void => {\n  const series = createHTMLElement(\n    'ul',\n    isTCF ? TcfClassNames.subElementItemList : `uc uc-list ${nonTcfClassName}`,\n    [Styles.subElementItemList],\n    items.map((item) => {\n      return createHTMLElement(\n        'li',\n        Classnames.subElementItemListElement,\n        [Styles.subElementItemListElement],\n        item,\n        useUcStyling,\n      );\n    }),\n    useUcStyling,\n  );\n  embedSubElement(container, isTCF, useUcStyling, headline, description, series, nonTcfClassName);\n};\n\n/**\n * handles the toggeling of a collapsable item.\n * @param button A HTML Button Element that triggers this function.\n * @param collapsableContent The HTML Element to be toggled.\n * @param arrow The arrow that indicates wheather the collapsable item is open or not.\n * @param id a unique idetifier of the HTML Element\n * @param type indicates if the element is a button or a link\n */\nconst toggleExpansion = (\n  button: HTMLButtonElement,\n  collapsableContent: HTMLElement,\n  arrow: HTMLElement,\n  id: string,\n  type: 'button' | 'link',\n): void => {\n  const htmlElement = document.getElementById(id);\n\n  if (htmlElement) {\n    const { collapsed, collapsedContent, collapsedStyles, opened, openedContent, openedStyles } =\n      type === 'button'\n        ? {\n            collapsed: Classnames.collapsedButton,\n            collapsedContent: Classnames.collapsedButtonContent,\n            collapsedStyles: Styles.collapsedButtonContent,\n            opened: Classnames.openedButton,\n            openedContent: Classnames.openedButtonContent,\n            openedStyles: Styles.openedButtonContent,\n          }\n        : {\n            collapsed: Classnames.collapsedLink,\n            collapsedContent: Classnames.collapsedLinkContent,\n            collapsedStyles: Styles.collapsedLinkContent,\n            opened: Classnames.openedLink,\n            openedContent: Classnames.openedLinkContent,\n            openedStyles: Styles.openedLinkArrow,\n          };\n\n    if (htmlElement.style.display === 'inline-block') {\n      setAttributes(htmlElement, Styles.collapsableDivContentHidden);\n      setAttributes(collapsableContent, collapsedStyles);\n\n      if (type === 'button') {\n        setAttributes(arrow, Styles.collapsedArrow);\n      } else {\n        setAttributes(arrow, Styles.collapsedLinkArrow);\n      }\n\n      arrow.setAttribute('class', Classnames.collapsedArrow);\n      collapsableContent.setAttribute('class', collapsedContent);\n      button.setAttribute('class', collapsed);\n    } else {\n      setAttributes(htmlElement, Styles.collapsableDivContentShown);\n\n      if (type === 'button') {\n        setAttributes(collapsableContent, openedStyles);\n        setAttributes(arrow, Styles.openedArrow);\n      } else {\n        setAttributes(arrow, Styles.openedLinkArrow);\n      }\n\n      arrow.setAttribute('class', Classnames.openedArrow);\n      collapsableContent.setAttribute('class', openedContent);\n      button.setAttribute('class', opened);\n    }\n  }\n};\n\n/**\n * Creates a new expandable Element (button style) and adds it to the container.\n * @param fragment A fragment to be used as a lightweigh version of the Document\n * @param collapseTitle The Title of the Button.\n * @param content The content of the expandable section\n * @param useUcStyling indicates whether the predifined styling should be used\n * @param showToggle indicates whether service should show consent toggle (optional)\n * @param service the GDPR service data to be used if showToggle is true\n */\nexport const embedExpandableItem = (\n  fragment: DocumentFragment,\n  collapseTitle: string,\n  content: string | Element | Node,\n  useUcStyling: boolean,\n  showToggle?: boolean,\n  service?: Service,\n): void => {\n  let expandableItem: HTMLElement;\n\n  if (useUcStyling) {\n    let toggle: HTMLButtonElement | null = null;\n    let rightElements: HTMLElement | null = null;\n\n    const collapsableButtonContent = createHTMLElement(\n      'h4',\n      Classnames.collapsedButtonContent,\n      [Styles.collapsedButtonContent],\n      collapseTitle,\n      useUcStyling,\n    );\n\n    const buttonArrow = createHTMLElement('i', Classnames.collapsedArrow, [Styles.collapsedArrow], [], useUcStyling);\n\n    if (showToggle && service) {\n      let toggleIcon: HTMLElement;\n\n      if (service.isEssential) toggleIcon = getDisabledIcon();\n      else toggleIcon = service.consent.status ? getOnIcon() : getOffIcon();\n\n      toggle = createHTMLElement<HTMLButtonElement>(\n        'button',\n        GdprEssentials.toggleButton,\n        [GdprStyles.toggleButton],\n        [toggleIcon],\n        useUcStyling,\n      );\n\n      if (!service.isEssential) {\n        toggle.onclick = (e: Event): Promise<void> => {\n          const ucUi = window[UC_UI_GLOBAL_NAMESPACE];\n          e.stopPropagation();\n\n          if (ucUi) {\n            return service.consent.status ? ucUi.rejectService(service.id) : ucUi.acceptService(service.id);\n          }\n\n          return Promise.reject();\n        };\n      }\n\n      rightElements = createHTMLElement('div', '', [Styles.flexContainer], [toggle, buttonArrow], useUcStyling);\n    }\n\n    const collapsableButton = createHTMLElement<HTMLButtonElement>(\n      'button',\n      Classnames.collapsedButton,\n      [Styles.collapsableButton],\n      showToggle && toggle && rightElements\n        ? [collapsableButtonContent, rightElements]\n        : [collapsableButtonContent, buttonArrow],\n      useUcStyling,\n    );\n    collapsableButton.setAttribute('data-testid', 'uc-embed-collapsable-button');\n\n    const expandableContent = createHTMLElement(\n      'div',\n      Classnames.collapseContent,\n      [Styles.collapsableDivContentHidden, { id: `uc-embed-collapsable-${uuid4()}` }],\n      content,\n      useUcStyling,\n    );\n    expandableContent.setAttribute('data-testid', 'uc-embed-collapsable-content');\n\n    collapsableButton.addEventListener('click', () =>\n      toggleExpansion(collapsableButton, collapsableButtonContent, buttonArrow, expandableContent.id, 'button'),\n    );\n\n    expandableItem = createHTMLElement(\n      'div',\n      Classnames.listItem,\n      [Styles.collapsableDiv],\n      [collapsableButton, expandableContent],\n      useUcStyling,\n    );\n  } else {\n    expandableItem = createHTMLElement(\n      'div',\n      Classnames.listItem,\n      [],\n      [\n        createHTMLElement('h4', Classnames.listItemHeadline, [], collapseTitle, useUcStyling),\n        createHTMLElement('div', Classnames.listItemContent, [], content, useUcStyling),\n      ],\n      useUcStyling,\n    );\n  }\n\n  fragment.appendChild(expandableItem);\n};\n\n/**\n * Exposes Storage Information to be embeded later on.\n * @param labels Cookie Information labels.\n * @param cookieMaxAgeSeconds Duration of cookie storage.\n * @param usesNonCookieAccess Identifies wheter the vendor uses non cookie storage.\n * @param cookieRefresh Identifies wheter the vendor uses cookie refresh.\n * @param usesCookies Identifies wheter the vendor uses cookies.\n */\nconst getStorageInformation = (\n  labels: CookieInformationLabels,\n  cookieMaxAgeSeconds: number | null,\n  usesNonCookieAccess: boolean | null,\n  cookieRefresh: boolean | null,\n  usesCookies: boolean | null,\n): string[] => {\n  const {\n    maximumAge,\n    nonCookieStorage,\n    yes,\n    no,\n    cookieRefresh: cookieRefreshLabel,\n    usesCookies: usesCookiesLabel,\n  } = labels;\n  const storageInformation = [];\n\n  if (usesCookies !== null) storageInformation.push(`${usesCookiesLabel}: ${usesCookies ? `${yes}` : `${no}`}`);\n\n  if (cookieMaxAgeSeconds !== null)\n    storageInformation.push(`${maximumAge}: ${convertCookieMaxAge(cookieMaxAgeSeconds, labels)}`);\n\n  if (cookieRefresh !== null) storageInformation.push(`${cookieRefreshLabel}: ${cookieRefresh ? `${yes}` : `${no}`}`);\n\n  if (usesNonCookieAccess !== null)\n    storageInformation.push(`${nonCookieStorage}: ${usesNonCookieAccess ? `${yes}` : `${no}`}`);\n\n  return storageInformation;\n};\n\n/**\n * Embeds storage information into a given HTML container.\n * @param container An HTML Element to embed the series into.\n * @param service The service/vendor containing the storage information\n * @param labels Cookie Information labels.\n * @param isTCF indicates whether the current variant is TCF\n * @param useUcStyling idicates whether the predifined styling should be used\n * @param nonTcfClassName the class name to be used for non-tcf variants\n */\nexport const embedStorageInfoSection = (\n  container: Element | Node,\n  service: Service | TCFVendor,\n  labels: CookieInformationLabels,\n  isTCF: boolean,\n  useUcStyling: boolean,\n  nonTcfClassName?: string,\n): void => {\n  const { cookieMaxAgeSeconds, usesNonCookieAccess, cookieRefresh, usesCookies } = service;\n\n  if (cookieMaxAgeSeconds || usesNonCookieAccess || cookieRefresh || usesCookies) {\n    const storageInformation = getStorageInformation(\n      labels,\n      cookieMaxAgeSeconds,\n      usesNonCookieAccess,\n      cookieRefresh,\n      usesCookies,\n    );\n\n    embedSeries(container, isTCF, useUcStyling, storageInformation, labels.title, null, nonTcfClassName);\n  }\n};\n\n/**\n * Embeds Stored Information Loading or Retry action views into a given HTML container.\n * @param container An HTML Element to embed the action view into.\n * @param disclosureUrl The url to get the cookie storage information.\n * @param labels Labels for cookie information.\n * @param action The action view needed (Loading or Retry).\n * @param useUcStyling idicates whether the predifined styling should be used.\n */\nconst embedStoredInfoAction = (\n  container: Element | Node,\n  disclosureUrl: string,\n  labels: CookieInformationLabels,\n  action: string,\n  useUcStyling: boolean,\n): void => {\n  const elements: HTMLElement[] = [];\n\n  switch (action) {\n    case 'loading':\n      elements.push(\n        createHTMLElement(\n          'p',\n          Classnames.storedInfoActionItem,\n          [Styles.storedInfoActionText],\n          labels.loading,\n          useUcStyling,\n        ),\n      );\n      break;\n    case 'retry': {\n      elements.push(\n        createHTMLElement(\n          'p',\n          Classnames.storedInfoActionItem,\n          [Styles.storedInfoActionText],\n          labels.error,\n          useUcStyling,\n        ),\n      );\n\n      const retryLink = createHTMLElement(\n        'p',\n        Classnames.storedInfoActionItem,\n        [Styles.storedInfoActionLink],\n        labels.tryAgain,\n        useUcStyling,\n      );\n      retryLink.addEventListener('click', () => {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        fetchStoredInfo(container, null, disclosureUrl, labels, useUcStyling);\n      });\n\n      elements.push(retryLink);\n      break;\n    }\n    default:\n      break;\n  }\n\n  const errorContainer = createHTMLElement(\n    'div',\n    Classnames.storedInfoAction,\n    [Styles.storedInfoAction],\n    elements,\n    useUcStyling,\n  );\n  const boxContainer = createHTMLElement(\n    'div',\n    Classnames.storedInfoItem,\n    [Styles.storedInfoItem],\n    errorContainer,\n    useUcStyling,\n  );\n\n  container.appendChild(\n    createHTMLElement(\n      'div',\n      Classnames.subElementStoredInfo,\n      [Styles.subElementExpandableLink],\n      boxContainer,\n      useUcStyling,\n    ),\n  );\n};\n\n/**\n * Embeds Stored Information into a given HTML container.\n * @param container An HTML Element to embed the storage information into.\n * @param data The cookie storage information.\n * @param labels Labels for cookie information.\n * @param useUcStyling idicates whether the predifined styling should be used.\n */\nconst embedStoredInfo = (\n  container: Element | Node,\n  data: DeviceStorage,\n  labels: CookieInformationLabels,\n  useUcStyling: boolean,\n): void => {\n  const itemsList: HTMLElement[] = [];\n\n  data.disclosures.forEach((disclosure) => {\n    const itemElements: HTMLElement[] = [];\n    const itemSubElements: HTMLElement[] = [];\n    const { description, domain, identifier, maxAgeSeconds, name, type } = disclosure;\n\n    let headline = name ? `${labels.name}: ${name}` : '';\n\n    if (name && identifier) headline += ' | ';\n\n    if (identifier) headline += `${labels.identifier}: ${identifier}`;\n\n    itemElements.push(\n      createHTMLElement('p', Classnames.storedInfoItemHeadline, [Styles.storedInfoItemHeader], headline, useUcStyling),\n    );\n\n    // Description\n    if (description) {\n      itemElements.push(\n        createHTMLElement(\n          'p',\n          Classnames.storedInfoItemHeadline,\n          [Styles.storedInfoItemDescription],\n          description,\n          useUcStyling,\n        ),\n      );\n    }\n\n    // Duration\n    itemSubElements.push(\n      createHTMLElement(\n        'p',\n        Classnames.storedInfoItemDataElement,\n        [Styles.storedInfoItemSubElement],\n        `${labels.duration}: ${convertCookieMaxAge(maxAgeSeconds, labels)}`,\n        useUcStyling,\n      ),\n    );\n    // Type\n    itemSubElements.push(\n      createHTMLElement(\n        'p',\n        Classnames.storedInfoItemDataElement,\n        [Styles.storedInfoItemSubElement],\n        `${labels.type}: ${type}`,\n        useUcStyling,\n      ),\n    );\n\n    // Domain\n    if (domain) {\n      itemSubElements.push(\n        createHTMLElement(\n          'p',\n          Classnames.storedInfoItemDataElement,\n          [Styles.storedInfoItemSubElement],\n          `${labels.domain}: ${convertDomain(domain, labels.anyDomain, labels.multipleDomains)}`,\n          useUcStyling,\n        ),\n      );\n    }\n\n    itemElements.push(\n      createHTMLElement(\n        'div',\n        Classnames.storedInfoItemData,\n        [Styles.storedInfoItemElement],\n        itemSubElements,\n        useUcStyling,\n      ),\n    );\n\n    itemsList.push(\n      createHTMLElement('div', Classnames.storedInfoItem, [Styles.storedInfoItem], itemElements, useUcStyling),\n    );\n  });\n\n  container.appendChild(\n    createHTMLElement(\n      'div',\n      Classnames.subElementStoredInfo,\n      [Styles.subElementExpandableLink],\n      itemsList,\n      useUcStyling,\n    ),\n  );\n};\n\n/**\n * Fetches Stored Information from a given URL.\n * @param container An HTML Element to embed the storage info into.\n * @param deviceStorage The cookie storage information.\n * @param disclosureUrl The url to get the cookie information data.\n * @param labels Cookie Information labels.\n * @param useUcStyling idicates whether the predifined styling should be used.\n */\nconst fetchStoredInfo = async (\n  container: Element | Node,\n  deviceStorage: DeviceStorage | null,\n  disclosureUrl: string | null,\n  labels: CookieInformationLabels,\n  useUcStyling: boolean,\n): Promise<void> => {\n  const removeChildNodes = () => {\n    while (container.firstChild) container.removeChild(container.firstChild);\n  };\n\n  const showLoading = () => {\n    removeChildNodes();\n    embedStoredInfoAction(container, '', labels, 'loading', useUcStyling);\n  };\n\n  const showRetry = (retryUrl: string) => {\n    removeChildNodes();\n    embedStoredInfoAction(container, retryUrl, labels, 'retry', useUcStyling);\n  };\n\n  const showInfo = (storageInfo: DeviceStorage) => {\n    removeChildNodes();\n    embedStoredInfo(container, storageInfo, labels, useUcStyling);\n  };\n\n  showLoading();\n\n  if (disclosureUrl && disclosureUrl !== '') {\n    try {\n      const response = await fetchUrl(disclosureUrl);\n      const parsedResponse = response ? await response.json() : null;\n\n      if (parsedResponse?.disclosures) {\n        const { disclosures } = parsedResponse;\n        const infoData = { disclosures };\n\n        if (infoData?.disclosures) {\n          showInfo(infoData);\n        }\n      } else {\n        showRetry(disclosureUrl);\n      }\n    } catch (e) {\n      showRetry(disclosureUrl);\n    }\n  } else if (deviceStorage && deviceStorage.disclosures.length > 0) {\n    showInfo(deviceStorage);\n  }\n};\n\n/**\n * Fetches the Stored Information from a given URL without using any style.\n * @param labels Cookie Information labels.\n * @param deviceStorage Device storage data.\n * @param disclosureUrl The URL to get stored information.\n */\n\nconst fetchStoredInfoNoStyle = async (\n  labels: CookieInformationLabels,\n  deviceStorage: DeviceStorage | null,\n  disclosureUrl: string | null,\n): Promise<string[]> => {\n  let infoItems: string[] = [];\n\n  const parseInfo = (data: DeviceStorage) => {\n    infoItems = data.disclosures.map((disclosure) => {\n      const { description, domain, identifier, maxAgeSeconds, name, type } = disclosure;\n      let idInfo = name ? `${labels.name}: ${name}` : '';\n\n      if (name && identifier) idInfo += ' | ';\n\n      if (identifier) idInfo += `${labels.identifier}: ${identifier}`;\n\n      const durationInfo = `${labels.duration}: ${convertCookieMaxAge(maxAgeSeconds, labels)}`;\n      const typeInfo = `${labels.type}: ${type}`;\n      const domainInfo = domain\n        ? `${labels.domain}: ${convertDomain(domain, labels.anyDomain, labels.multipleDomains)}`\n        : '';\n\n      return `${idInfo}; ${description}; ${durationInfo}; ${typeInfo}; ${domainInfo}`;\n    });\n  };\n\n  if (disclosureUrl && disclosureUrl !== '') {\n    try {\n      const response = await fetchUrl(disclosureUrl);\n      const parsedResponse = response ? await response.json() : null;\n\n      if (parsedResponse?.disclosures) {\n        const { disclosures } = parsedResponse;\n        const infoData = { disclosures };\n\n        if (infoData?.disclosures) {\n          parseInfo(infoData);\n\n          return infoItems;\n        }\n      } else {\n        // showError;\n        return [];\n      }\n    } catch (error) {\n      // showError;\n      return [];\n    }\n  } else if (deviceStorage && deviceStorage.disclosures.length > 0) {\n    parseInfo(deviceStorage);\n\n    return infoItems;\n  }\n\n  return [];\n};\n\n/**\n * Creates a new expandable Element (link style) and adds it to the container.\n * @param container The container that the newly created Expandable Element is embedded in.\n * @param collapseTitle The Title of the Button.\n * @param content The content of the expandable section.\n * @param deviceStorage The device storage information.\n * @param disclosureUrl The URL to get stored information.\n * @param labels The cookie Information labels.\n * @param isTCF indicates whether the current variant is TCF\n * @param useUcStyling idicates whether the predifined styling should be used.\n * @param nonTcfClassName the class name to be used for non-tcf variants\n */\nconst embedExpandableLink = (\n  container: Element | Node,\n  collapseTitle: string,\n  content: Element | Node,\n  deviceStorage: DeviceStorage | null,\n  disclosureUrl: string | null,\n  labels: CookieInformationLabels,\n  isTCF: boolean,\n  useUcStyling: boolean,\n  nonTcfClassName?: string,\n): void => {\n  let expandableLink: HTMLElement | null;\n\n  if (useUcStyling) {\n    const collapsableLinkContent = createHTMLElement(\n      'div',\n      Classnames.collapsedLinkContent,\n      [Styles.collapsedLinkContent],\n      collapseTitle,\n      useUcStyling,\n    );\n\n    const linkArrow = createHTMLElement('i', Classnames.collapsedArrow, [Styles.collapsedLinkArrow], [], useUcStyling);\n\n    const collapsableLink = createHTMLElement<HTMLButtonElement>(\n      'button',\n      Classnames.collapsedLink,\n      [Styles.collapsableLink],\n      [collapsableLinkContent, linkArrow],\n      useUcStyling,\n    );\n\n    const expandableContent = createHTMLElement(\n      'div',\n      Classnames.collapseContent,\n      [Styles.collapsableDivContentHidden, { id: `uc-embed-collapsable-${uuid4()}` }],\n      content,\n      useUcStyling,\n    );\n\n    collapsableLink.addEventListener('click', () => {\n      fetchStoredInfo(expandableContent, deviceStorage, disclosureUrl, labels, useUcStyling);\n      toggleExpansion(collapsableLink, collapsableLinkContent, linkArrow, expandableContent.id, 'link');\n    });\n\n    expandableLink = createHTMLElement(\n      'div',\n      Classnames.subElement,\n      [],\n      [collapsableLink, expandableContent],\n      useUcStyling,\n    );\n  } else {\n    const contentElement = createHTMLElement('div', Classnames.listItemContent, [], content, useUcStyling);\n\n    expandableLink = createHTMLElement(\n      'div',\n      Classnames.subElement,\n      [],\n      [\n        createHTMLElement(\n          'h4',\n          isTCF ? Classnames.listItemHeadline : `uc uc-heading ${nonTcfClassName}`,\n          [],\n          collapseTitle,\n          useUcStyling,\n        ),\n        contentElement,\n      ],\n      useUcStyling,\n    );\n\n    fetchStoredInfoNoStyle(labels, deviceStorage, disclosureUrl).then((data: string[]) => {\n      if (data.length > 0) {\n        embedSeries(contentElement, isTCF, false, data, '', null, !isTCF ? nonTcfClassName : null);\n      } else {\n        embedSeries(contentElement, isTCF, false, [labels.error], '', null, !isTCF ? `${nonTcfClassName}Error` : null);\n      }\n    });\n  }\n\n  container.appendChild(expandableLink);\n};\n\n/**\n * Embeds Stored Information into a given HTML container.\n * @param container The container that the newly created Expandable Element is embedded in.\n * @param service The service/vendor containing the storage information\n * @param labels The cookie Information labels.\n * @param isTCF indicates whether the current variant is TCF\n * @param useUcStyling idicates whether the predifined styling should be used.\n * @param nonTcfClassName the class name to be used for non-tcf variants\n */\nexport const embedStoredInfoSection = (\n  container: Element | Node,\n  service: Service | TCFVendor,\n  labels: CookieInformationLabels,\n  isTCF: boolean,\n  useUcStyling: boolean,\n  nonTcfClassName?: string,\n): void => {\n  const { deviceStorage, deviceStorageDisclosureUrl } = service;\n  const hasDeviceStorage = deviceStorage?.disclosures && deviceStorage.disclosures.length > 0;\n  const hasDisclosureUrl = deviceStorageDisclosureUrl && deviceStorageDisclosureUrl !== '';\n\n  if (hasDeviceStorage || hasDisclosureUrl) {\n    const storedInfoFragment = document.createDocumentFragment();\n    embedExpandableLink(\n      container,\n      labels.storedInformation,\n      storedInfoFragment,\n      deviceStorage,\n      deviceStorageDisclosureUrl,\n      labels,\n      isTCF,\n      useUcStyling,\n      nonTcfClassName,\n    );\n  }\n};\n"],"names":["Color","Classnames","collapseContent","collapsedArrow","collapsedButton","collapsedButtonContent","collapsedLink","collapsedLinkContent","listItem","listItemContent","listItemHeadline","openedArrow","openedButton","openedButtonContent","openedLink","openedLinkContent","storedInfoAction","storedInfoActionItem","storedInfoItem","storedInfoItemData","storedInfoItemDataElement","storedInfoItemHeadline","subElement","subElementItemListElement","subElementStoredInfo","Styles","collapsableButton","style","collapsableDiv","collapsableDivContentHidden","collapsableDivContentShown","collapsableLink","collapsedLinkArrow","flexContainer","headlines","headlinesBorderBottom","link","list","openedLinkArrow","outerBox","storedInfoActionLink","storedInfoActionText","storedInfoItemDescription","storedInfoItemElement","storedInfoItemHeader","storedInfoItemSubElement","subElementDescription","subElementExpandableLink","subElementItemList","GDPR_EMBEDDING_SECTIONS","GDPR_EMBEDDING_TYPE","TCF_EMBEDDING_TYPE","MAX_LIST_SIZE_IN_SUBLIST","extractGdprEmbedOptions","container","servicesLabel","serviceName","nullishOperation","getAttribute","EmbedSettingNamesGDPR","embeddingServiceAttributeName","embeddingShowAllServices","sections","optionsString","embeddingOptionsAttributeName","includes","embeddingShowAllOptions","Object","values","options","replace","split","filter","embedding","getGdprSections","embedService","embedTitle","embeddingTitle","embedType","embeddingStyle","CATEGORY","ALL","showToggle","embeddingShowToggle","useUcStyling","embeddingUseStyling","extractTcfEmbedOptions","labels","secondLayer","EmbedSettingNames","PURPOSE","VENDOR","tabs","purposes","label","vendors","iabVendorsTitle","general","iabVendors","nonIabVendorsTitle","nonIabVendors","iabPurposeTitle","nonIabPurposeTitle","nonIabPurposes","useUcStylining","reset","lastElementChild","removeChild","setAttributes","attributes","forEach","attribute","entries","key","value","setAttribute","createHTMLElement","tag","className","content","newElement","document","createElement","length","a","innerText","Array","isArray","fragment","createDocumentFragment","c","appendChild","getTitle","headline","isTCF","nonTcfClassName","TcfClassNames","subElementHeadline","getDescription","description","embedSubElement","element","embedText","descriptions","map","embedLink","linkText","linkElement","href","embedSeries","items","series","item","toggleExpansion","button","collapsableContent","arrow","id","type","htmlElement","getElementById","collapsed","collapsedContent","collapsedStyles","opened","openedContent","openedStyles","display","embedExpandableItem","collapseTitle","service","expandableItem","toggle","rightElements","collapsableButtonContent","buttonArrow","toggleIcon","isEssential","getDisabledIcon","consent","status","getOnIcon","getOffIcon","GdprEssentials","toggleButton","GdprStyles","onclick","e","ucUi","window","UC_UI_GLOBAL_NAMESPACE","stopPropagation","rejectService","acceptService","Promise","reject","expandableContent","uuid4","addEventListener","embedStorageInfoSection","cookieMaxAgeSeconds","usesNonCookieAccess","cookieRefresh","usesCookies","storageInformation","maximumAge","nonCookieStorage","yes","no","cookieRefreshLabel","usesCookiesLabel","push","convertCookieMaxAge","getStorageInformation","title","embedStoredInfoAction","disclosureUrl","action","elements","loading","error","retryLink","tryAgain","fetchStoredInfo","errorContainer","boxContainer","async","deviceStorage","removeChildNodes","firstChild","showRetry","retryUrl","showInfo","storageInfo","data","itemsList","disclosures","disclosure","itemElements","itemSubElements","domain","identifier","maxAgeSeconds","name","duration","convertDomain","anyDomain","multipleDomains","embedStoredInfo","response","fetchUrl","parsedResponse","json","infoData","embedExpandableLink","expandableLink","collapsableLinkContent","linkArrow","contentElement","infoItems","parseInfo","idInfo","fetchStoredInfoNoStyle","then","embedStoredInfoSection","deviceStorageDisclosureUrl","storedInfoFragment","storedInformation"],"mappings":"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"}