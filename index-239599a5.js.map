{"version":3,"file":"index-239599a5.js","sources":["../src/views/Buttons/CustomizeButton.tsx","../src/modules/sort.ts","../src/components/TCFHandler/MapPurposes.tsx","../src/components/TCFHandler/MapSpecialFeatures.tsx","../src/components/TCFHandler/MapStacks.tsx","../src/components/LegalDescriptionFormatter/LegalDescriptionFormatter.styles.tsx","../src/components/LegalDescriptionFormatter/LegalDescriptionFormatter.tsx","../src/components/VirtualList/VirtualLegalDescriptionItem.tsx","../src/components/PurposesList/PurposesList.tsx","../src/views/TCF/TCFFirstLayerContent.tsx","../src/components/VendorDescription/VendorDescription.tsx","../src/components/VirtualList/VirtualVendorItem.tsx","../src/components/VendorsList/VendorsList.tsx","../src/views/TCF/TCFTabs.tsx","../src/views/TCF/TCF.tsx"],"sourcesContent":["import { FunctionalComponent, h } from 'preact';\nimport Button from '../../components/Button';\nimport { TCFUISettings } from '@usercentrics/cmp-browser-sdk';\nimport { ViewButtonProps } from './interface';\nimport { useSettingsContext } from '../../contexts/SettingsContext';\nimport { useTheme } from 'styled-components';\n\nconst CustomizeButton: FunctionalComponent<ViewButtonProps> = ({ disabled, onClick }) => {\n  const { settings } = useSettingsContext();\n  const ui = settings.ui as TCFUISettings;\n  const theme = useTheme();\n\n  return (\n    <Button\n      ariaLabel={ui.ariaLabels.ccpaMoreInformation}\n      backgroundColor={theme.ui.buttons.save.bg}\n      disabled={disabled}\n      label={ui.buttons.manageSettings.label}\n      onClick={onClick}\n      testid=\"uc-customize-button\"\n      textColor={theme.ui.buttons.save.text}\n    />\n  );\n};\n\nexport default CustomizeButton;\n","import { UICategory, UIService } from '../contexts/CategoryContext';\n\ninterface ObjectWithId {\n  id: number | string;\n}\n\n/**\n * Helper method for sorting any array with a string or number id in ascending order. Should be used in combination with useMemo() for best performance.\n */\nexport function sortById<T extends ObjectWithId>(arrayToBeSorted: T[]): T[] {\n  return arrayToBeSorted.sort((a: T, b: T) => (a.id > b.id ? 1 : -1));\n}\n\n/**\n * Helper method for sorting any array by prop in ascending order. Should be used in combination with useMemo() for best performance.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function sortByPropAsc<T extends Record<string, any>>(arrayToBeSorted: T[], propName: string): T[] {\n  return arrayToBeSorted.sort((a: T, b: T) => (a[propName] > b[propName] ? 1 : -1));\n}\n\n/**\n * Helper method to sort specifically the categories\n * @param categories categories to be sorted\n */\nexport function sortCategories(categories: UICategory[]): UIService[] {\n  return categories\n    .reduce((acc: UIService[], cur) => {\n      if (!cur.services) {\n        return acc;\n      }\n\n      return [...acc, ...cur.services];\n    }, [])\n    .sort((a, b) => {\n      if (a.isEssential && b.isEssential) {\n        return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n      }\n\n      if (a.isEssential && !b.isEssential) {\n        return -1;\n      }\n\n      if (!a.isEssential && b.isEssential) {\n        return 1;\n      }\n\n      return a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1;\n    });\n}\n","import { useCallback, useMemo } from 'preact/hooks';\nimport { TCFPurpose } from '@usercentrics/cmp-browser-sdk';\nimport { TCFState } from '../../contexts/TcfContext';\nimport { sortById } from '../../modules/sort';\n\nexport type PurposeProps = {\n  checked: boolean;\n  legitimateInterestChecked: boolean;\n  purpose: TCFPurpose;\n  onPurposeConsentToggle: () => void;\n  onPurposeLegitimateInterestToggle: () => void;\n};\n\nconst MapPurposes: (props: TCFState) => PurposeProps[] = ({ setTcfData, tcfData }) => {\n  const onPurposeToggleHandler = useCallback(\n    (newConsentChecked: boolean, newLegitimateInterestChecked: boolean, id: number): void => {\n      if (!tcfData?.purposes) {\n        return;\n      }\n      setTcfData({\n        ...tcfData,\n        purposes: tcfData.purposes.map((purpose) =>\n          purpose.id === id\n            ? {\n                ...purpose,\n                consent: newConsentChecked,\n                legitimateInterestConsent: newLegitimateInterestChecked,\n              }\n            : purpose,\n        ),\n      });\n    },\n    [setTcfData, tcfData],\n  );\n\n  const sortedPurposes = useMemo(() => {\n    if (tcfData) {\n      return sortById(tcfData.purposes);\n    }\n\n    return [];\n  }, [tcfData]);\n\n  return sortedPurposes.map((purpose) => {\n    const checked = purpose.consent || false;\n    const legitimateInterestChecked =\n      purpose.legitimateInterestConsent != null ? purpose.legitimateInterestConsent : true;\n\n    const onPurposeConsentToggle = (): void => {\n      onPurposeToggleHandler(!checked, legitimateInterestChecked, purpose.id);\n    };\n\n    const onPurposeLegitimateInterestToggle = (): void => {\n      onPurposeToggleHandler(checked, !legitimateInterestChecked, purpose.id);\n    };\n\n    return {\n      checked,\n      legitimateInterestChecked,\n      onPurposeConsentToggle,\n      onPurposeLegitimateInterestToggle,\n      purpose,\n    };\n  });\n};\n\nexport default MapPurposes;\n","import { useCallback, useMemo } from 'preact/hooks';\nimport { TCFSpecialFeature } from '@usercentrics/cmp-browser-sdk';\nimport { TCFState } from '../../contexts/TcfContext';\nimport { sortById } from '../../modules/sort';\n\nexport type SpecialFeatureProps = {\n  checked: boolean;\n  onSpecialFeatureToggle: () => void;\n  specialFeature: TCFSpecialFeature;\n};\n\nconst MapSpecialFeatures: (props: TCFState) => SpecialFeatureProps[] = ({ setTcfData, tcfData }) => {\n  const onSpecialFeatureToggleHandler = useCallback(\n    (newConsentChecked: boolean, id: number): void => {\n      if (!tcfData) {\n        return;\n      }\n      setTcfData({\n        ...tcfData,\n        specialFeatures: tcfData.specialFeatures.map((specialFeature) =>\n          specialFeature.id === id\n            ? {\n                ...specialFeature,\n                consent: newConsentChecked,\n              }\n            : specialFeature,\n        ),\n      });\n    },\n    [setTcfData, tcfData],\n  );\n\n  const sortedSpecialFeatures = useMemo(() => {\n    if (tcfData?.specialFeatures) {\n      return sortById(tcfData.specialFeatures);\n    }\n\n    return [];\n  }, [tcfData]);\n\n  return sortedSpecialFeatures.map((specialFeature) => {\n    const checked = specialFeature.consent || false;\n\n    const onSpecialFeatureToggle = (): void => {\n      onSpecialFeatureToggleHandler(!checked, specialFeature.id);\n    };\n\n    return {\n      checked,\n      onSpecialFeatureToggle,\n      specialFeature,\n    };\n  });\n};\n\nexport default MapSpecialFeatures;\n","import { useCallback, useMemo } from 'preact/hooks';\nimport { TCFStack } from '@usercentrics/cmp-browser-sdk';\nimport { TCFState } from '../../contexts/TcfContext';\nimport { sortById } from '../../modules/sort';\n\nexport type StackProps = {\n  checked: boolean;\n  onStackConsentToggle: () => void;\n  stack: TCFStack;\n};\n\nconst MapStacks: (props: TCFState) => StackProps[] = ({ setTcfData, tcfData }) => {\n  const onStackToggleHandler = useCallback(\n    (newConsentChecked: boolean, id: number): void => {\n      if (!tcfData) {\n        return;\n      }\n      const toggledStack = tcfData.stacks.find((stack) => stack.id === id);\n\n      if (toggledStack) {\n        setTcfData({\n          ...tcfData,\n          purposes: tcfData.purposes.map((purpose) =>\n            toggledStack.purposeIds.includes(purpose.id)\n              ? {\n                  ...purpose,\n                  consent: newConsentChecked,\n                }\n              : purpose,\n          ),\n          specialFeatures: tcfData.specialFeatures.map((specialFeature) =>\n            toggledStack.specialFeatureIds.includes(specialFeature.id)\n              ? {\n                  ...specialFeature,\n                  consent: newConsentChecked,\n                }\n              : specialFeature,\n          ),\n        });\n      }\n    },\n    [setTcfData, tcfData],\n  );\n\n  const sortedStacks = useMemo(() => {\n    if (tcfData?.stacks) {\n      return sortById(tcfData.stacks);\n    }\n\n    return [];\n  }, [tcfData]);\n\n  if (!tcfData) {\n    return [];\n  }\n\n  return sortedStacks.map((stack) => {\n    const purposes = tcfData.purposes.filter((purpose) => stack.purposeIds.includes(purpose.id));\n    const specialFeatures = tcfData.specialFeatures.filter((specialFeature) =>\n      stack.specialFeatureIds.includes(specialFeature.id),\n    );\n    // A stack is checked if SOME containing purposes or specialFeatures are checked\n    const checked =\n      purposes.some((purpose) => purpose.consent) || specialFeatures.some((specialFeature) => specialFeature.consent);\n\n    const onStackConsentToggle = (): void => {\n      onStackToggleHandler(!checked, stack.id);\n    };\n\n    return {\n      checked,\n      onStackConsentToggle,\n      stack,\n    };\n  });\n};\n\nexport default MapStacks;\n","import { Title } from '../List';\nimport styled from 'styled-components';\n\nexport const PaddedTitle = styled(Title)`\n  max-width: 100%;\n  padding-top: ${({ theme }) => theme.spacing.base.md};\n`;\n\nexport const Unformatted = styled.div`\n  max-width: 100%;\n  white-space: pre-line;\n`;\n","import { Fragment, FunctionalComponent, h } from 'preact';\nimport { List, ListItem, Section } from '../List';\nimport { PaddedTitle, Unformatted } from './LegalDescriptionFormatter.styles';\nimport { VerticalSpacer } from '../Spacers/VerticalSpacer';\nimport { getFormatedLegalDescription } from '../../modules/helpers';\nimport { memo } from 'preact/compat';\n\ntype Props = {\n  description: string;\n  descriptionTitle?: string;\n  legalDescription?: string;\n};\n\nconst LegalDescriptionFormatter: FunctionalComponent<Props> = memo(\n  ({ description, descriptionTitle, legalDescription = '' }) => {\n    // The regex captures all non-empty lines from the description\n    const lines = getFormatedLegalDescription(legalDescription);\n\n    return (\n      <Section>\n        {descriptionTitle && <PaddedTitle>{descriptionTitle}</PaddedTitle>}\n        <ListItem>{description}</ListItem>\n        {legalDescription && (\n          <Fragment>\n            <VerticalSpacer custom={4} />\n            <List noPadding>\n              {(lines &&\n                typeof lines !== 'string' &&\n                lines.map((line) => {\n                  return (\n                    <Fragment>\n                      <PaddedTitle>{line.title}</PaddedTitle>\n                      {line.bulletPoints.map((bp) => {\n                        return (\n                          <ListItem showBulletPoints addMargin>\n                            {bp}\n                          </ListItem>\n                        );\n                      })}\n                    </Fragment>\n                  );\n                })) || <Unformatted>{legalDescription}</Unformatted>}\n            </List>\n          </Fragment>\n        )}\n      </Section>\n    );\n  },\n);\n\nexport default LegalDescriptionFormatter;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport { ComponentChild, FunctionalComponent, h } from 'preact';\nimport ExpandableCard, { ToggleProps } from '../ExpandableCard/ExpandableCard';\nimport { PurposeProps, SpecialFeatureProps, StackProps } from '../TCFHandler';\nimport { RefContainer, RowDescription, ToggleRow } from './VirtualList.style';\nimport { TCFFeature, TCFUISettings } from '@usercentrics/cmp-browser-sdk';\nimport { InlineToggle } from '../Toggles';\nimport LegalDescriptionFormatter from '../LegalDescriptionFormatter/LegalDescriptionFormatter';\nimport { TabPanelTitle } from '../Tabs';\nimport { memo } from 'preact/compat';\nimport { nullishOperation } from '../../App.helpers';\nimport { useRef } from 'preact/hooks';\nimport { useSettingsContext } from '../../contexts/SettingsContext';\nimport { useVirtualListItem } from '../../hooks';\n\ntype Data = TCFFeature | PurposeProps | SpecialFeatureProps | StackProps;\n\ninterface ItemProps<T> {\n  data: T[];\n  index: number;\n  id: number;\n  getItemSize: (index: number) => number;\n  setItemSize: (index: number, height: number) => void;\n  testid: string;\n  title?: string;\n  useInlineToggle?: boolean;\n  useFromStackOnly?: boolean;\n}\n\nconst VirtualLegalDescriptionItem: FunctionalComponent<ItemProps<Data>> = memo(\n  ({ data, id, index, getItemSize, setItemSize, testid, title, useInlineToggle = false, useFromStackOnly = false }) => {\n    const itemRef = useRef<HTMLDivElement>(null);\n    const { updateComponentSize } = useVirtualListItem({ getItemSize, index, itemRef, setItemSize });\n    const { settings } = useSettingsContext();\n    const ui = settings.ui as TCFUISettings;\n    const shouldShowToggles = (useFromStackOnly && !ui.firstLayer.hideToggles) || !useFromStackOnly;\n    const dataId = title != null ? id - 1 : id;\n\n    if (title != null && id === 0) {\n      return (\n        <RefContainer ref={itemRef} tabIndex={-1}>\n          <TabPanelTitle tabIndex={-1}>{title}</TabPanelTitle>\n        </RefContainer>\n      );\n    }\n\n    const item = data[dataId];\n\n    if (!item) {\n      return null;\n    }\n\n    const getToggles = (\n      ariaLabel: string,\n      checked: boolean,\n      toggleId: string,\n      label: string,\n      onToggle: () => void,\n    ): ToggleProps[] => [\n      {\n        ariaLabel,\n        checked,\n        id: toggleId,\n        label,\n        onToggle,\n      },\n    ];\n\n    const renderItem = (): ComponentChild => {\n      // render a stack\n      if ((item as StackProps).stack) {\n        const stackProps = item as StackProps;\n\n        if (useInlineToggle) {\n          return (\n            <ToggleRow data-testid=\"uc-tcf-stacks\">\n              <RowDescription>{stackProps.stack.name}</RowDescription>\n              {!ui.firstLayer.hideToggles && (\n                <InlineToggle\n                  checked={stackProps.checked}\n                  id={stackProps.stack.id}\n                  onToggle={stackProps.onStackConsentToggle}\n                />\n              )}\n            </ToggleRow>\n          );\n        }\n\n        const toggles: ToggleProps[] = [];\n\n        if (shouldShowToggles) {\n          getToggles(\n            `${stackProps.stack.name} ${nullishOperation(title, 'stack')} ${ui.ariaLabels.vendorConsentToggle}`,\n            stackProps.checked,\n            `stackConsent${stackProps.stack.id}`,\n            '',\n            stackProps.onStackConsentToggle,\n          );\n        }\n\n        return (\n          <ExpandableCard\n            hideToggle={!shouldShowToggles}\n            onToggleExpandable={updateComponentSize}\n            testid={testid}\n            title={stackProps.stack.name}\n            toggles={toggles}\n            type={nullishOperation(title, 'stack')}\n            useBoldTitle={!useFromStackOnly}\n          >\n            <LegalDescriptionFormatter description={stackProps.stack.description} />\n          </ExpandableCard>\n        );\n      }\n\n      // render specialPurpose and feature\n      if ((item as TCFFeature).name) {\n        const basePurpose = item as TCFFeature;\n\n        if (useInlineToggle) {\n          return (\n            <ToggleRow data-testid=\"uc-tcf-special-purposes\">\n              <RowDescription>{basePurpose.name}</RowDescription>\n            </ToggleRow>\n          );\n        }\n\n        return (\n          <ExpandableCard\n            testid={testid}\n            hideToggle={false}\n            title={basePurpose.name}\n            type={nullishOperation(title, 'special purposes')}\n            onToggleExpandable={updateComponentSize}\n            useBoldTitle={!useFromStackOnly}\n          >\n            <LegalDescriptionFormatter\n              description={basePurpose.description}\n              legalDescription={useFromStackOnly ? '' : basePurpose.descriptionLegal}\n            />\n          </ExpandableCard>\n        );\n      }\n\n      // Render a purpose\n      if ((item as PurposeProps).purpose) {\n        const purposeProps = item as PurposeProps;\n\n        if (useInlineToggle) {\n          return (\n            <ToggleRow data-testid=\"uc-tcf-purposes\">\n              <RowDescription>{purposeProps.purpose.name}</RowDescription>\n              {!ui.firstLayer.hideToggles && (\n                <InlineToggle\n                  checked={purposeProps.checked}\n                  id={purposeProps.purpose.id}\n                  onToggle={purposeProps.onPurposeConsentToggle}\n                />\n              )}\n            </ToggleRow>\n          );\n        }\n\n        let toggles: ToggleProps[] = [];\n\n        if (shouldShowToggles && purposeProps.purpose.showConsentToggle) {\n          toggles = getToggles(\n            `${purposeProps.purpose.name} ${nullishOperation(title, 'purposes')} ${ui.ariaLabels.vendorConsentToggle}`,\n            purposeProps.checked,\n            `purposeConsent${purposeProps.purpose.id}`,\n            useFromStackOnly ? '' : ui.toggles.consent.label,\n            purposeProps.onPurposeConsentToggle,\n          );\n        }\n\n        if (purposeProps.purpose.showLegitimateInterestToggle && !useFromStackOnly) {\n          toggles.unshift({\n            ariaLabel: `${purposeProps.purpose.name} ${nullishOperation(title, 'purposes')} ${\n              ui.ariaLabels.vendorLegIntToggle\n            }`,\n            checked: purposeProps.legitimateInterestChecked,\n            id: `purposeLegitimateInterestConsent${purposeProps.purpose.id}`,\n            label: ui.toggles.legitimateInterest.label,\n            onToggle: purposeProps.onPurposeLegitimateInterestToggle,\n          });\n        }\n\n        return (\n          <ExpandableCard\n            hideToggle={false}\n            onToggleExpandable={updateComponentSize}\n            testid={testid}\n            title={purposeProps.purpose.name}\n            toggles={toggles}\n            type={nullishOperation(title, 'purposes')}\n            useBoldTitle={!useFromStackOnly}\n          >\n            <LegalDescriptionFormatter\n              description={purposeProps.purpose.description}\n              legalDescription={useFromStackOnly ? '' : purposeProps.purpose.descriptionLegal}\n            />\n          </ExpandableCard>\n        );\n      }\n\n      // render a specialFeature\n      if ((item as SpecialFeatureProps).specialFeature) {\n        const specialFeatureProps = item as SpecialFeatureProps;\n\n        if (useInlineToggle) {\n          return (\n            <ToggleRow data-testid=\"uc-tcf-special-features\">\n              <RowDescription>{specialFeatureProps.specialFeature.name}</RowDescription>\n              {!ui.firstLayer.hideToggles && (\n                <InlineToggle\n                  checked={specialFeatureProps.checked}\n                  id={specialFeatureProps.specialFeature.id}\n                  onToggle={specialFeatureProps.onSpecialFeatureToggle}\n                />\n              )}\n            </ToggleRow>\n          );\n        }\n\n        let toggles: ToggleProps[] = [];\n\n        if (shouldShowToggles) {\n          toggles = getToggles(\n            `${specialFeatureProps.specialFeature.name} ${nullishOperation(title, 'features')} ${\n              ui.ariaLabels.vendorConsentToggle\n            }`,\n            specialFeatureProps.checked,\n            `specialFeature${specialFeatureProps.specialFeature.id}`,\n            specialFeatureProps.checked\n              ? ui.toggles.specialFeaturesToggle.onLabel\n              : ui.toggles.specialFeaturesToggle.offLabel,\n            specialFeatureProps.onSpecialFeatureToggle,\n          );\n        }\n\n        return (\n          <ExpandableCard\n            hideToggle={!shouldShowToggles}\n            onToggleExpandable={updateComponentSize}\n            testid={testid}\n            title={specialFeatureProps.specialFeature.name}\n            toggles={toggles}\n            type={nullishOperation(title, 'features')}\n            useBoldTitle={!useFromStackOnly}\n          >\n            <LegalDescriptionFormatter\n              description={specialFeatureProps.specialFeature.description}\n              legalDescription={specialFeatureProps.specialFeature.descriptionLegal}\n            />\n          </ExpandableCard>\n        );\n      }\n\n      return null;\n    };\n\n    return <RefContainer ref={itemRef}>{renderItem()}</RefContainer>;\n  },\n);\n\nexport default VirtualLegalDescriptionItem;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport { ComponentChild, FunctionalComponent, h } from 'preact';\nimport MapPurposes, { PurposeProps } from '../TCFHandler/MapPurposes';\nimport MapSpecialFeatures, { SpecialFeatureProps } from '../TCFHandler/MapSpecialFeatures';\nimport MapStacks, { StackProps } from '../TCFHandler/MapStacks';\nimport { TCFFeature, TCFUISettings } from '@usercentrics/cmp-browser-sdk';\nimport { forwardRef, memo } from 'preact/compat';\nimport { getIndexesRatio, getItemStyle, getLengthWithExtra } from '../VirtualList/helpers';\nimport MapCategories from '../CategoryHandler/MapCategories';\nimport { VIEW } from '../../enums';\nimport VirtualCategoryItem from '../VirtualList/VirtualCategoryItem';\nimport { VirtualChildContainer } from '../VirtualList/VirtualList.style';\nimport VirtualLegalDescriptionItem from '../VirtualList/VirtualLegalDescriptionItem';\nimport VirtualListWrapper from '../VirtualList';\nimport { useCategoryContext } from '../../contexts/CategoryContext';\nimport { useEffect } from 'preact/hooks';\nimport { useSettingsContext } from '../../contexts/SettingsContext';\nimport { useTcfContext } from '../../contexts/TcfContext';\nimport { useUiContext } from '../../contexts/UiContext';\nimport { useVirtualList } from '../../hooks';\n\nconst EXTRA_CATEGORIES_ITEMS = 1; // title\nconst EXTRA_FEATURES_ITEMS = 1; // title\nconst EXTRA_PURPOSES_ITEMS = 1; // title\n\ntype Props = {\n  categoriesTitle: string;\n  featuresTitle: string;\n  hideNonIabPurposes?: boolean;\n  isVisible: boolean;\n  purposesTitle: string;\n  useInlineToggle?: boolean;\n  useFromStackOnly?: boolean;\n};\n\nconst PurposesList: FunctionalComponent<Props> = forwardRef<HTMLDivElement, Props>(\n  (\n    {\n      categoriesTitle,\n      featuresTitle,\n      hideNonIabPurposes = false,\n      isVisible,\n      purposesTitle,\n      useInlineToggle = false,\n      useFromStackOnly = false,\n    },\n    virtualListRef,\n  ) => {\n    const { tcfData, setTcfData } = useTcfContext();\n    const { clearCategoryPurposeScrollToId, scrollToIdTabViewCategoryPurpose, view } = useUiContext();\n    let purposes: PurposeProps[];\n    let specialFeatures: SpecialFeatureProps[];\n    let purposeStacks: StackProps[] = [];\n    let specialFeatureStacks: StackProps[] = [];\n    let features: TCFFeature[] = [];\n    let specialPurposes: TCFFeature[] = [];\n\n    // Clears the scroll to index to avoid jumping back on it after the component rendered\n    useEffect(() => {\n      if (isVisible) {\n        clearCategoryPurposeScrollToId();\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isVisible]);\n\n    if (useFromStackOnly) {\n      purposes = MapPurposes({ setTcfData, tcfData }).filter(\n        (purposeProps: PurposeProps) => !purposeProps.purpose.isPartOfASelectedStack,\n      );\n      specialFeatures = MapSpecialFeatures({ setTcfData, tcfData }).filter(\n        (specialFeatureProps: SpecialFeatureProps) => !specialFeatureProps.specialFeature.isPartOfASelectedStack,\n      );\n      purposeStacks = MapStacks({ setTcfData, tcfData }).filter(\n        (stackProps: StackProps) => stackProps.stack.purposeIds.length > 0,\n      );\n      specialFeatureStacks = MapStacks({ setTcfData, tcfData }).filter(\n        (stackProps: StackProps) =>\n          stackProps.stack.purposeIds.length === 0 && stackProps.stack.specialFeatureIds.length > 0,\n      );\n    } else {\n      purposes = MapPurposes({ setTcfData, tcfData });\n      specialFeatures = MapSpecialFeatures({ setTcfData, tcfData });\n      features = tcfData?.features || [];\n      specialPurposes = tcfData?.specialPurposes || [];\n    }\n    const categories = MapCategories(useCategoryContext());\n    const { settings } = useSettingsContext();\n    const ui = settings.ui as TCFUISettings;\n\n    const [purposesLength, specialPurposesLength, purposeStacksLength] = getLengthWithExtra(\n      EXTRA_PURPOSES_ITEMS,\n      purposes,\n      specialPurposes,\n      purposeStacks,\n    );\n    const [featuresLength, specialFeaturesLength, specialFeaturesStacksLength] = getLengthWithExtra(\n      EXTRA_FEATURES_ITEMS,\n      features,\n      specialFeatures,\n      specialFeatureStacks,\n    );\n    const categoriesLength = categories.length > 0 ? categories.length + EXTRA_CATEGORIES_ITEMS : 0;\n\n    const purposesCount = purposesLength + specialPurposesLength + purposeStacksLength;\n    const featuresCount = featuresLength + specialFeaturesLength + specialFeaturesStacksLength;\n    const categoriesCount = categoriesLength;\n    const itemCount = purposesCount + featuresCount + categoriesCount;\n\n    const { setItemSize, getItemSize } = useVirtualList(itemCount, 50);\n\n    const getScrollIndexForId = (): number => {\n      let index;\n\n      // If scrollToId is a number or a string representation of a number --> look in vendor list\n\n      if (Number(scrollToIdTabViewCategoryPurpose)) {\n        // 1. Go through Purpose List\n        index = purposes.findIndex(\n          (purposeProp) => purposeProp.purpose.id === Number(scrollToIdTabViewCategoryPurpose),\n        );\n\n        if (index >= 0) return index + EXTRA_PURPOSES_ITEMS;\n\n        // 2. Go through Special Purpose List\n        index = specialPurposes.findIndex(\n          (specialPurposeProp) => specialPurposeProp.id === Number(scrollToIdTabViewCategoryPurpose),\n        );\n\n        if (index >= 0) return index + purposesLength;\n\n        // 3. Go through Feature List\n        index = features.findIndex((feature) => feature.id === Number(scrollToIdTabViewCategoryPurpose));\n\n        if (index >= 0) return index + EXTRA_FEATURES_ITEMS + purposesCount;\n\n        // 4. Go through Special Feature List\n        index = specialFeatures.findIndex(\n          (specialFeatureProp) => specialFeatureProp.specialFeature.id === Number(scrollToIdTabViewCategoryPurpose),\n        );\n\n        if (index >= 0) return index + featuresLength + purposesCount;\n      } else if (scrollToIdTabViewCategoryPurpose) {\n        // Id is in Category List\n        index = categories.findIndex((category) => category.category.slug === scrollToIdTabViewCategoryPurpose);\n\n        return index + purposesCount + featuresCount + EXTRA_CATEGORIES_ITEMS;\n      }\n\n      return -1;\n    };\n\n    const renderList = (index: number): ComponentChild => {\n      const [\n        purposesIndex,\n        purposeStackIndex,\n        specialPurposesIndex,\n        featuresIndex,\n        specialFeaturesIndex,\n        specialFeatureStackIndex,\n        categoriesIndex,\n      ] = getIndexesRatio(\n        purposesLength,\n        purposeStacksLength,\n        specialPurposesLength,\n        featuresLength,\n        specialFeaturesLength,\n        specialFeaturesStacksLength,\n        categoriesLength,\n      );\n\n      const hasPurposes = purposesLength > 0 || specialPurposesLength > 0 || purposeStacksLength > 0;\n      const hasFeatures = featuresLength > 0 || specialFeaturesLength > 0 || specialFeaturesStacksLength > 0;\n\n      if (hasPurposes) {\n        if (purposesLength > 0 && index < purposesIndex.end) {\n          return (\n            <VirtualLegalDescriptionItem\n              data={purposes}\n              index={index}\n              id={index}\n              getItemSize={getItemSize}\n              setItemSize={setItemSize}\n              testid=\"uc-tcf-purposes-expandable\"\n              title={purposesTitle}\n              useInlineToggle={useInlineToggle}\n              useFromStackOnly={useFromStackOnly}\n            />\n          );\n        }\n\n        if (specialPurposesLength > 0 && index >= specialPurposesIndex.start && index < specialPurposesIndex.end) {\n          return (\n            <VirtualLegalDescriptionItem\n              data={specialPurposes}\n              index={index}\n              id={index - specialPurposesIndex.start}\n              getItemSize={getItemSize}\n              setItemSize={setItemSize}\n              testid=\"uc-tcf-special-purposes-expandable\"\n              useInlineToggle={useInlineToggle}\n              useFromStackOnly={useFromStackOnly}\n              {...(purposesLength > 0 ? {} : { title: purposesTitle })}\n            />\n          );\n        }\n\n        if (purposeStacksLength > 0 && index >= purposeStackIndex.start && index < purposeStackIndex.end) {\n          return (\n            <VirtualLegalDescriptionItem\n              data={purposeStacks}\n              index={index}\n              id={index - purposeStackIndex.start}\n              getItemSize={getItemSize}\n              setItemSize={setItemSize}\n              testid=\"uc-tcf-purposes-stack-expandable\"\n              useInlineToggle={useInlineToggle}\n              useFromStackOnly={useFromStackOnly}\n              {...(purposesLength > 0 ? {} : { title: purposesTitle })}\n            />\n          );\n        }\n      }\n\n      if (hasFeatures) {\n        if (featuresLength > 0 && index >= featuresIndex.start && index < featuresIndex.end) {\n          return (\n            <VirtualLegalDescriptionItem\n              data={features}\n              index={index}\n              id={index - featuresIndex.start}\n              getItemSize={getItemSize}\n              setItemSize={setItemSize}\n              testid=\"uc-tcf-features-expandable\"\n              useInlineToggle={useInlineToggle}\n              useFromStackOnly={useFromStackOnly}\n              title={featuresTitle}\n            />\n          );\n        }\n\n        if (specialFeaturesLength > 0 && index >= specialFeaturesIndex.start && index < specialFeaturesIndex.end) {\n          return (\n            <VirtualLegalDescriptionItem\n              data={specialFeatures}\n              index={index}\n              id={index - specialFeaturesIndex.start}\n              getItemSize={getItemSize}\n              setItemSize={setItemSize}\n              testid=\"uc-tcf-special-features-expandable\"\n              useInlineToggle={useInlineToggle}\n              useFromStackOnly={useFromStackOnly}\n              {...(featuresLength > 0 ? {} : { title: featuresTitle })}\n            />\n          );\n        }\n\n        if (\n          specialFeaturesStacksLength > 0 &&\n          index >= specialFeatureStackIndex.start &&\n          index < specialFeatureStackIndex.end\n        ) {\n          return (\n            <VirtualLegalDescriptionItem\n              data={specialFeatureStacks}\n              index={index}\n              id={index - specialFeatureStackIndex.start}\n              getItemSize={getItemSize}\n              setItemSize={setItemSize}\n              testid=\"uc-tcf-special-features-expandable\"\n              useInlineToggle={useInlineToggle}\n              useFromStackOnly={useFromStackOnly}\n              {...(featuresLength > 0 ? {} : { title: featuresTitle })}\n            />\n          );\n        }\n      }\n\n      if (\n        !hideNonIabPurposes &&\n        categoriesLength > 0 &&\n        index >= categoriesIndex.start &&\n        index < categoriesIndex.end\n      ) {\n        return (\n          <VirtualCategoryItem\n            categories={categories}\n            index={index}\n            id={index - categoriesIndex.start}\n            {...(scrollToIdTabViewCategoryPurpose && { scrollToId: scrollToIdTabViewCategoryPurpose })}\n            getItemSize={getItemSize}\n            setItemSize={setItemSize}\n            showToggles={!ui.secondLayer.hideToggles}\n            showServicesToggles={!ui.secondLayer.hideToggles}\n            title={categoriesTitle}\n            showOnlyConsentToggle={useFromStackOnly}\n          />\n        );\n      }\n\n      return null;\n    };\n\n    // Do not keep second layer scroll - If current view is First Layer we reset the list scroll position.\n    const addScroll = view !== VIEW.FIRST_LAYER && scrollToIdTabViewCategoryPurpose;\n\n    // To avoid the white space when you decide not to show anything\n    if (purposesCount === 0 && featuresCount === 0 && hideNonIabPurposes) {\n      return null;\n    }\n\n    return (\n      <VirtualListWrapper\n        data-testid=\"uc-virtual-list\"\n        ref={virtualListRef}\n        estimatedItemSize={50}\n        isVisible={isVisible}\n        itemCount={itemCount}\n        itemSize={getItemSize}\n        {...(addScroll && { scrollToIndex: getScrollIndexForId() })}\n        renderItem={({ index, style }): ComponentChild => (\n          <VirtualChildContainer data-testid={`uc-virtual-list-item-${index}`} key={index} style={getItemStyle(style)}>\n            {renderList(index)}\n          </VirtualChildContainer>\n        )}\n        width=\"100%\"\n      />\n    );\n  },\n);\n\nexport default memo(PurposesList);\n","import { FunctionalComponent, h } from 'preact';\nimport PurposesList from '../../components/PurposesList';\nimport { useMobileScroll } from '../../hooks';\n\ntype Props = {\n  categoriesTitle: string;\n  featuresTitle: string;\n  hideNonIabPurposes?: boolean;\n  isVisible: boolean;\n  purposesTitle: string;\n  useInlineToggle?: boolean;\n  useFromStackOnly?: boolean;\n};\n\nconst TCFFirstLayerContent: FunctionalComponent<Props> = ({\n  categoriesTitle,\n  featuresTitle,\n  hideNonIabPurposes = false,\n  isVisible,\n  purposesTitle,\n  useInlineToggle = false,\n  useFromStackOnly = false,\n}) => {\n  const [listRef] = useMobileScroll(null, false);\n\n  return (\n    <PurposesList\n      ref={listRef}\n      categoriesTitle={categoriesTitle}\n      featuresTitle={featuresTitle}\n      hideNonIabPurposes={hideNonIabPurposes}\n      isVisible={isVisible} // should be always TRUE for TCF First Layer\n      purposesTitle={purposesTitle}\n      useInlineToggle={useInlineToggle}\n      useFromStackOnly={useFromStackOnly}\n    />\n  );\n};\n\nexport default TCFFirstLayerContent;\n","import { Fragment, FunctionalComponent, VNode, h } from 'preact';\nimport { Link, List, ListItem, Section } from '../List';\nimport { TCFUISettings, TCFVendor } from '@usercentrics/cmp-browser-sdk';\nimport { PaddedTitle } from './VendorDescription.styles';\nimport StorageInfo from '../StorageInfo';\nimport { memo } from 'preact/compat';\n\ntype Props = {\n  onToggleExpandable: () => void;\n  vendor: TCFVendor;\n  ui: TCFUISettings;\n};\n\nconst VendorDescription: FunctionalComponent<Props> = memo(({ vendor, ui, onToggleExpandable }) => {\n  const { cookieInformation: cookieInformationLabels, vendor: vendorLabels } = ui.labels;\n  const mapList = (title: string, list: { id: number; name: string }[]): VNode | null => {\n    if (!list.length) {\n      return null;\n    }\n\n    return (\n      <Section>\n        <PaddedTitle>{title}</PaddedTitle>\n        <List>\n          {list.map((item) => {\n            return <ListItem showBulletPoints>{item.name}</ListItem>;\n          })}\n        </List>\n      </Section>\n    );\n  };\n\n  return (\n    <Fragment>\n      {mapList(vendorLabels.purposes, vendor.purposes)}\n      {mapList(vendorLabels.legitimateInterest, vendor.legitimateInterestPurposes)}\n      {mapList(vendorLabels.specialPurposes, vendor.specialPurposes)}\n      {mapList(vendorLabels.features, vendor.features)}\n      {mapList(vendorLabels.specialFeatures, vendor.specialFeatures)}\n      {vendor.policyUrl && (\n        <Section>\n          <PaddedTitle>{vendorLabels.privacyPolicy}</PaddedTitle>\n          <Link href={vendor.policyUrl}>{vendor.policyUrl}</Link>\n        </Section>\n      )}\n      <StorageInfo\n        cookieInformationLabels={cookieInformationLabels}\n        cookieMaxAgeSeconds={vendor.cookieMaxAgeSeconds}\n        cookieRefresh={vendor.cookieRefresh}\n        deviceStorage={vendor.deviceStorage}\n        deviceStorageDisclosureUrl={vendor.deviceStorageDisclosureUrl}\n        storageInfoAnchorLabel={`${vendor.name} ${ui.ariaLabels.vendorDetailedStorageInformation}`}\n        onToggleExpandable={onToggleExpandable}\n        usesCookies={vendor.usesCookies}\n        usesNonCookieAccess={vendor.usesNonCookieAccess}\n        isNonIabVendor={false}\n      />\n    </Fragment>\n  );\n});\n\nexport default VendorDescription;\n","import { ButtonLink, Label } from '../ExpandableLink/ExpandableLink.style';\nimport ExpandableCard, { ToggleProps } from '../ExpandableCard/ExpandableCard';\nimport { FunctionalComponent, h } from 'preact';\nimport { TCFUISettings, TCFVendor } from '@usercentrics/cmp-browser-sdk';\nimport { RefContainer } from './VirtualList.style';\nimport { ScrollToId } from '../../App.helpers';\nimport { TabPanelTitle } from '../Tabs';\nimport VendorDescription from '../VendorDescription/VendorDescription';\nimport { memo } from 'preact/compat';\nimport { useRef } from 'preact/hooks';\nimport { useSettingsContext } from '../../contexts/SettingsContext';\nimport { useVirtualListItem } from '../../hooks';\n\ntype ItemProps = {\n  index: number;\n  id: number;\n  scrollToId: ScrollToId;\n  getItemSize: (index: number) => number;\n  setItemSize: (index: number, height: number) => void;\n  title: string;\n  onToggleConsent: (id: number, checked: boolean) => void;\n  onToggleLegInterestConsent: (id: number, checked: boolean) => void;\n  onToggleAll: () => void;\n  vendors: TCFVendor[];\n};\n\nconst legitimateInterestDefaultValue = true;\nconst consentDefaultValue = false;\n\nconst VirtualVendorItem: FunctionalComponent<ItemProps> = memo(\n  ({\n    id,\n    index,\n    scrollToId,\n    getItemSize,\n    setItemSize,\n    title,\n    vendors,\n    onToggleAll,\n    onToggleConsent,\n    onToggleLegInterestConsent,\n  }) => {\n    const itemRef = useRef<HTMLDivElement>(null);\n    const { updateComponentSize } = useVirtualListItem({ getItemSize, index, itemRef, setItemSize });\n    const { settings } = useSettingsContext();\n\n    const ui = settings.ui as TCFUISettings;\n\n    // Optional: render a title as a list item\n    if (index === 0) {\n      return (\n        <RefContainer ref={itemRef}>\n          <TabPanelTitle>{title}</TabPanelTitle>\n          {ui.secondLayer.showToggleAllVendors && (\n            <ButtonLink data-testid=\"uc-toggle-all-iab-vendors\" onClick={onToggleAll}>\n              <Label>{ui.labels.vendor.toggleAll}</Label>\n            </ButtonLink>\n          )}\n        </RefContainer>\n      );\n    }\n\n    const toggles: ToggleProps[] = [];\n    const vendorProps = vendors[id - 1];\n\n    if (vendorProps.showLegitimateInterestConsentToggle) {\n      toggles.push({\n        ariaLabel: `${vendorProps.name} ${ui.secondLayer.tabs.vendors.label} ${ui.ariaLabels.vendorLegIntToggle}`,\n        checked: vendorProps.legitimateInterestConsent,\n        defaultChecked: legitimateInterestDefaultValue,\n        id: `legitimateInterestConsent${vendorProps.id}`,\n        label: ui.toggles.legitimateInterest.label,\n        onToggle: () =>\n          onToggleLegInterestConsent(\n            vendorProps.id,\n            vendorProps.legitimateInterestConsent === null\n              ? !legitimateInterestDefaultValue\n              : !vendorProps.legitimateInterestConsent,\n          ),\n      });\n    }\n\n    if (vendorProps.showConsentToggle) {\n      toggles.push({\n        ariaLabel: `${vendorProps.name} ${ui.secondLayer.tabs.vendors.label} ${ui.ariaLabels.vendorConsentToggle}`,\n        checked: vendorProps.consent,\n        defaultChecked: consentDefaultValue,\n        id: `vendorConsent${vendorProps.id}`,\n        label: ui.toggles.consent.label,\n        onToggle: () => onToggleConsent(vendorProps.id, !vendorProps.consent),\n      });\n    }\n\n    return (\n      <RefContainer ref={itemRef}>\n        <ExpandableCard\n          hideToggle={false}\n          isExpandedOnInit={vendorProps.id === scrollToId}\n          onToggleExpandable={updateComponentSize}\n          testid=\"uc-tcf-vendors-expandable\"\n          title={vendorProps.name}\n          toggles={toggles}\n          type={ui.secondLayer.tabs.vendors.label}\n        >\n          <VendorDescription vendor={vendorProps} ui={ui} onToggleExpandable={updateComponentSize} />\n        </ExpandableCard>\n      </RefContainer>\n    );\n  },\n);\n\nexport default VirtualVendorItem;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport { ComponentChild, FunctionalComponent, h } from 'preact';\nimport { ListContainer, ListWrapper } from '../List';\nimport { TCFUISettings, TCFVendor } from '@usercentrics/cmp-browser-sdk';\nimport { UIService, areServicesFull, useCategoryContext } from '../../contexts/CategoryContext';\nimport { forwardRef, memo } from 'preact/compat';\nimport { getIndexesRatio, getItemStyle, getLengthWithExtra } from '../VirtualList/helpers';\nimport { sortByPropAsc, sortCategories } from '../../modules/sort';\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'preact/hooks';\nimport { useKeyPress, useVirtualList } from '../../hooks';\nimport ControllerIdItem from '../ControllerIdItem';\nimport MapServices from '../ServiceHandler/MapServices';\nimport { ScrollToId } from '../../App.helpers';\nimport SubServiceDetail from '../SubServices/SubServiceDetail';\nimport { SubServicesWrapper } from '../SubServices/SubServices.styles';\nimport { VirtualChildContainer } from '../VirtualList/VirtualList.style';\nimport VirtualList from '../VirtualList';\nimport VirtualServiceItem from '../VirtualList/VirtualServiceItem';\nimport VirtualVendorItem from '../VirtualList/VirtualVendorItem';\nimport { useSettingsContext } from '../../contexts/SettingsContext';\nimport { useSubService } from '../../hooks/useSubService';\nimport { useTcfContext } from '../../contexts/TcfContext';\nimport { useUiContext } from '../../contexts/UiContext';\n\nconst EXTRA_VENDOR_ITEMS = 1;\nconst EXTRA_SERVICE_ITEMS = 1;\nconst CONTROLLER_ID_ITEM = 1;\n\ntype Props = {\n  controllerIdLabel: string;\n  isVisible: boolean;\n  serviceTitle: string;\n  vendorTitle: string;\n};\n\nconst VendorsList: FunctionalComponent<Props> = forwardRef<HTMLDivElement, Props>(\n  ({ controllerIdLabel, isVisible, serviceTitle, vendorTitle }, virtualListRef) => {\n    const { onCloseSubServiceDetail, onOpenSubServiceDetail, selectedSubService } = useSubService();\n    const { tcfData, setTcfData } = useTcfContext();\n    const subserviceRef = useRef<HTMLDivElement>(null);\n    const isTabKeyPressed = useKeyPress({ targetKey: 'Tab' });\n    const [activeElement, setActiveElement] = useState<Element | null | undefined>(null);\n\n    const { categories, setCategories, onServiceToggle } = MapServices(useCategoryContext());\n\n    const vendors = useMemo(() => {\n      if (tcfData?.vendors) {\n        return sortByPropAsc(tcfData.vendors, 'name');\n      }\n\n      return [];\n    }, [tcfData]);\n    const services = useMemo(() => sortCategories(categories), [categories]);\n    const { clearServiceVendorScrollToId, scrollToIdTabViewServiceVendors } = useUiContext();\n\n    useEffect(() => {\n      if (isTabKeyPressed && selectedSubService === null) {\n        let focusedElement = null;\n        try {\n          focusedElement = document.activeElement?.shadowRoot?.querySelector(':focus-visible');\n        } catch (error) {\n          focusedElement = null;\n        }\n\n        if (focusedElement !== null) {\n          setActiveElement(focusedElement);\n        }\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isTabKeyPressed]);\n\n    // Clears the scroll to index to avoid jumping back on it after the component rendered\n    useEffect(() => {\n      if (isVisible) {\n        onCloseSubServiceDetail();\n        clearServiceVendorScrollToId();\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isVisible]);\n\n    useEffect(() => {\n      if (selectedSubService !== null && subserviceRef.current) {\n        subserviceRef.current.focus();\n      }\n    }, [selectedSubService]);\n\n    /**\n     * If has at least one vendor or non-iab vendor selected, then toggle it off\n     * Otherwise, flip it.\n     */\n    const hasOneVendorToggledOn = useMemo(\n      () =>\n        vendors.some(\n          (vendor) =>\n            vendor.consent ||\n            vendor.legitimateInterestConsent ||\n            vendor.consent === null ||\n            vendor.legitimateInterestConsent === null,\n        ),\n      [vendors],\n    );\n    const hasAllVendorToggledOff = useMemo(\n      () => vendors.every((vendor) => !vendor.consent && !vendor.legitimateInterestConsent),\n      [vendors],\n    );\n    const hasOneCategoryToggledOn = useMemo(\n      () => services.filter((service) => !service.isEssential).some((service) => service.consent.status),\n      [services],\n    );\n    const hasAllCategoriesToggledOff = useMemo(\n      () => services.filter((service) => !service.isEssential).every((service) => !service.consent.status),\n      [services],\n    );\n\n    const [vendorsLength] = getLengthWithExtra(EXTRA_VENDOR_ITEMS, vendors);\n    const [servicesLength] = getLengthWithExtra(EXTRA_SERVICE_ITEMS, services);\n    const itemCount = vendorsLength + servicesLength + CONTROLLER_ID_ITEM;\n    const { getItemSize, setItemSize } = useVirtualList(itemCount, 50);\n    const { settings } = useSettingsContext();\n    const ui = settings.ui as TCFUISettings;\n    const [vendorToggleAll, setVendorToggleAll] = useState(false);\n    const [categoryToggleAll, setCategoryToggleAll] = useState(false);\n\n    /**\n     * IAB VENDORS HANDLERS\n     * */\n    const setVendorConsents = useCallback(\n      (id: number, consent: boolean | null, legitimateInterestConsent: boolean | null) => {\n        const index = vendors.findIndex((vendor) => vendor.id === id);\n\n        if (index !== -1 && tcfData) {\n          setTcfData({\n            ...tcfData,\n            vendors: [\n              ...vendors.slice(0, index),\n              {\n                ...vendors[index],\n                consent: consent === null ? vendors[index].consent : consent,\n                legitimateInterestConsent:\n                  legitimateInterestConsent === null\n                    ? vendors[index].legitimateInterestConsent\n                    : legitimateInterestConsent,\n              },\n              ...vendors.slice(index + 1),\n            ],\n          });\n        }\n      },\n      [tcfData, setTcfData, vendors],\n    );\n\n    const onToggleVendorConsent = useCallback(\n      (id: number, checked: boolean): void => {\n        setVendorConsents(id, checked, null);\n      },\n      [setVendorConsents],\n    );\n\n    const onToggleVendorLegInterestConsent = useCallback(\n      (id: number, checked: boolean): void => {\n        setVendorConsents(id, null, checked);\n      },\n      [setVendorConsents],\n    );\n\n    const resolveToggleAllStatus = useCallback(\n      (atLeastOneChecked: boolean, allUnchecked: boolean, toggleAllStatus: boolean): boolean => {\n        if (atLeastOneChecked) {\n          return false;\n        }\n\n        if (allUnchecked) {\n          return true;\n        }\n\n        return !toggleAllStatus;\n      },\n      [],\n    );\n\n    const onToggleAllVendors = useCallback(() => {\n      if (!tcfData) {\n        return;\n      }\n      setTcfData({\n        ...tcfData,\n        vendors: vendors.map((vendor: TCFVendor) => ({\n          ...vendor,\n          consent: resolveToggleAllStatus(hasOneVendorToggledOn, hasAllVendorToggledOff, vendorToggleAll),\n          legitimateInterestConsent: resolveToggleAllStatus(\n            hasOneVendorToggledOn,\n            hasAllVendorToggledOff,\n            vendorToggleAll,\n          ),\n        })),\n      });\n      setVendorToggleAll(resolveToggleAllStatus(hasOneVendorToggledOn, hasAllVendorToggledOff, vendorToggleAll));\n    }, [\n      setTcfData,\n      tcfData,\n      vendors,\n      resolveToggleAllStatus,\n      hasOneVendorToggledOn,\n      hasAllVendorToggledOff,\n      vendorToggleAll,\n    ]);\n\n    const onToggleAllServices = useCallback(() => {\n      setCategories(\n        categories.map((category) => ({\n          ...category,\n          services: category.services.map((service: UIService) => ({\n            ...service,\n            consent: {\n              ...service.consent,\n              status: resolveToggleAllStatus(hasOneCategoryToggledOn, hasAllCategoriesToggledOff, categoryToggleAll),\n            },\n          })),\n        })),\n      );\n\n      setCategoryToggleAll(\n        resolveToggleAllStatus(hasOneCategoryToggledOn, hasAllCategoriesToggledOff, categoryToggleAll),\n      );\n    }, [\n      setCategories,\n      categories,\n      resolveToggleAllStatus,\n      hasOneCategoryToggledOn,\n      hasAllCategoriesToggledOff,\n      categoryToggleAll,\n    ]);\n\n    const getScrollIndexForId = (): number => {\n      let index;\n\n      // If scrollToId is a number or a string representation of a number --> look in vendor list\n\n      if (Number(scrollToIdTabViewServiceVendors)) {\n        index = vendors.findIndex((vendorProp) => vendorProp.id === Number(scrollToIdTabViewServiceVendors));\n\n        // index found --> return correct whole list index by adding static Placeholder in the top of the list\n        if (index >= 0) return index + EXTRA_VENDOR_ITEMS;\n      } else if (scrollToIdTabViewServiceVendors) {\n        index = services.findIndex((service: { id: ScrollToId }) => service.id === scrollToIdTabViewServiceVendors);\n\n        // index found --> return correct whole list index by adding static Placeholder in the top of the vendor and service list and the length of the vendor list\n        if (index >= 0) {\n          if (vendors.length) {\n            return index + vendors.length + EXTRA_VENDOR_ITEMS + EXTRA_SERVICE_ITEMS;\n          }\n\n          return index + EXTRA_SERVICE_ITEMS;\n        }\n      }\n\n      return -1;\n    };\n\n    const renderItem = (index: number): ComponentChild => {\n      const [vendorsIndex, servicesIndex] = getIndexesRatio(vendorsLength, servicesLength);\n\n      if (vendorsLength > 0 && index < vendorsIndex.end) {\n        return (\n          <VirtualVendorItem\n            index={index}\n            id={index}\n            getItemSize={getItemSize}\n            setItemSize={setItemSize}\n            title={vendorTitle}\n            scrollToId={Number(scrollToIdTabViewServiceVendors)}\n            onToggleConsent={onToggleVendorConsent}\n            onToggleLegInterestConsent={onToggleVendorLegInterestConsent}\n            onToggleAll={onToggleAllVendors}\n            vendors={vendors}\n          />\n        );\n      }\n\n      if (\n        servicesLength > 0 &&\n        index >= servicesIndex.start &&\n        index < servicesIndex.end &&\n        areServicesFull(services)\n      ) {\n        return (\n          <VirtualServiceItem\n            categories={categories}\n            getItemSize={getItemSize}\n            index={index}\n            id={index - servicesIndex.start}\n            onOpenSubServiceDetail={onOpenSubServiceDetail}\n            onToggleService={onServiceToggle}\n            onToggleAllServices={onToggleAllServices}\n            setItemSize={setItemSize}\n            services={services}\n            showToggles={!ui.secondLayer.hideToggles}\n            hideToggle={ui.secondLayer.hideToggles}\n            title={serviceTitle}\n            scrollToId={scrollToIdTabViewServiceVendors}\n          />\n        );\n      }\n\n      // always render controllerID in the last position of the list\n      if (index === itemCount - 1) {\n        return <ControllerIdItem data-testid=\"controller-id\" label={controllerIdLabel} />;\n      }\n\n      return null;\n    };\n\n    return (\n      <ListContainer>\n        <ListWrapper>\n          <VirtualList\n            data-testid=\"uc-virtual-list\"\n            ref={virtualListRef}\n            estimatedItemSize={50}\n            isVisible={isVisible}\n            itemCount={itemCount}\n            itemSize={getItemSize}\n            {...(scrollToIdTabViewServiceVendors && { scrollToIndex: getScrollIndexForId() })}\n            renderItem={({ index, style }): ComponentChild => (\n              <VirtualChildContainer\n                data-testid={`uc-virtual-list-item-${index}`}\n                key={index}\n                style={getItemStyle(style)}\n              >\n                {renderItem(index)}\n              </VirtualChildContainer>\n            )}\n            width=\"100%\"\n          />\n        </ListWrapper>\n        {selectedSubService && (\n          <SubServicesWrapper ref={subserviceRef} tabIndex={0}>\n            <SubServiceDetail\n              subService={selectedSubService}\n              onCloseDetail={() => {\n                onCloseSubServiceDetail();\n\n                if (activeElement) {\n                  (activeElement as HTMLElement).focus();\n                }\n              }}\n            />\n          </SubServicesWrapper>\n        )}\n      </ListContainer>\n    );\n  },\n);\n\nexport default memo(VendorsList);\n","/* eslint-disable react/jsx-props-no-spreading */\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport { Tab, TabList, TabPanel, useTabs } from '../../components/Tabs';\nimport PurposesList from '../../components/PurposesList';\nimport { TAB_VIEW } from '../../enums';\nimport { TCFUISettings } from '@usercentrics/cmp-browser-sdk';\nimport VendorsList from '../../components/VendorsList';\nimport { memo } from 'preact/compat';\nimport { useEffect } from 'preact/hooks';\nimport { useMobileScroll } from '../../hooks';\nimport { useSettingsContext } from '../../contexts/SettingsContext';\n\nconst TCFTabs: FunctionalComponent = () => {\n  const { settings } = useSettingsContext();\n  const { selected, select } = useTabs();\n\n  const initialTab = TAB_VIEW.CATEGORIES_PURPOSES;\n  const [firstTabRef, secondTabRef, stickyRef] = useMobileScroll(selected, true);\n\n  useEffect(() => {\n    if (!selected) {\n      select(initialTab);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const ui = settings.ui as TCFUISettings;\n\n  return (\n    <Fragment>\n      <TabList ariaLabel=\"SettingsTabs\" ref={stickyRef}>\n        <Tab\n          ariaLabel={ui.secondLayer.tabs.purposes.label}\n          forPanel={TAB_VIEW.CATEGORIES_PURPOSES}\n          testid=\"uc-tab-purposes\"\n        >\n          {ui.secondLayer.tabs.purposes.label}\n        </Tab>\n        <Tab ariaLabel={ui.secondLayer.tabs.vendors.label} forPanel={TAB_VIEW.SERVICES_VENDORS} testid=\"uc-tab-vendors\">\n          {ui.secondLayer.tabs.vendors.label}\n        </Tab>\n      </TabList>\n      <Fragment>\n        <TabPanel id={TAB_VIEW.CATEGORIES_PURPOSES} testid=\"uc-panel-purposes\">\n          <PurposesList\n            ref={firstTabRef}\n            categoriesTitle={ui.labels.general.nonIabPurposes}\n            featuresTitle={ui.labels.general.features}\n            isVisible={selected === TAB_VIEW.CATEGORIES_PURPOSES}\n            purposesTitle={ui.labels.general.purposes}\n            useInlineToggle={false} // Should be always FALSE for TCF Second Layer\n            useFromStackOnly={false} // Should be always FALSE for TCF Second Layer\n          />\n        </TabPanel>\n        <TabPanel id={TAB_VIEW.SERVICES_VENDORS} testid=\"uc-panel-vendors\">\n          <VendorsList\n            ref={secondTabRef}\n            controllerIdLabel={ui.labels.nonTCFLabels.general.controllerId}\n            isVisible={selected === TAB_VIEW.SERVICES_VENDORS}\n            vendorTitle={ui.labels.general.iabVendors}\n            serviceTitle={ui.labels.general.nonIabVendors}\n          />\n        </TabPanel>\n      </Fragment>\n    </Fragment>\n  );\n};\n\nexport default memo(TCFTabs);\n","import { ANALYTICS_TYPE, LAYER_PLACEMENT, VIEW } from '../../enums';\nimport { AcceptAllButton, CustomizeButton, DenyAllButton, SaveButton } from '../Buttons';\nimport { Fragment, FunctionalComponent, h } from 'preact';\nimport Usercentrics, {\n  TCFUISettings,\n  TCF_DECISION_UI_LAYER,\n  TCF_SCOPE,\n  TRACKING_EVENT_TYPE,\n} from '@usercentrics/cmp-browser-sdk';\nimport { dispatchAnalyticsEvent, setTrackingPixel } from '../../modules/helpers';\nimport { getTCFUserDecision, getUserDecision } from '../../App.helpers';\nimport { useDeviceState, useMutation } from '../../hooks';\nimport MainLayout from '../../components/MainLayout/MainLayout';\nimport { TCFButtons } from '../../components/ButtonsContainer/interface';\nimport TCFFirstLayerContent from './TCFFirstLayerContent';\nimport TCFTabs from './TCFTabs';\nimport { Tabs } from '../../components/Tabs';\nimport { memo } from 'preact/compat';\nimport { useCategoryContext } from '../../contexts/CategoryContext';\nimport { useEffect } from 'preact/hooks';\nimport { useSettingsContext } from '../../contexts/SettingsContext';\nimport { useTcfContext } from '../../contexts/TcfContext';\nimport { useUiContext } from '../../contexts/UiContext';\n\nconst testIds = {\n  firstLayer: 'uc-tcf-first-layer',\n  secondLayer: 'uc-tcf-second-layer',\n};\ninterface Props {\n  onCustomize: () => void;\n  onFullScreenAmp: () => void;\n  onLanguageChange: (selectedLanguage: string) => void;\n  onShowVendorsHandler: () => void;\n  onAcceptAll: () => Promise<void>;\n  onDenyAll: () => Promise<void>;\n  isAcceptDenyAllLoading: boolean;\n  UC: Usercentrics;\n}\n\nconst TCF: FunctionalComponent<Props> = ({\n  onCustomize,\n  onFullScreenAmp,\n  onLanguageChange,\n  onShowVendorsHandler,\n  onAcceptAll,\n  onDenyAll,\n  isAcceptDenyAllLoading,\n  UC,\n}) => {\n  const { settings } = useSettingsContext();\n  const { isIE } = useDeviceState();\n  const { closeView, isAmpEnabled, isInFullScreen, previousView, setIsInFullScreen, settingsCloseView, setView, view } =\n    useUiContext();\n  const { categories, getUpdatedCategories, setCategories } = useCategoryContext();\n  const { tcfData, setTcfData } = useTcfContext();\n  const ui = settings.ui as TCFUISettings;\n  const [dismissAmp, { loading: dismissAmpLoading }] = useMutation(UC.dismissAmp, UC);\n  const [saveTCFDataAmp, { loading: saveTcfDataAmpLoading }] = useMutation(UC.saveTCFDataAmp, UC);\n  const [updateServices, { loading: updateServicesLoading }] = useMutation(UC.updateServices, UC);\n  const [updateChoicesForTCF, { loading: updateChoicesForTCFLoading }] = useMutation(UC.updateChoicesForTCF, UC);\n\n  /**\n   * This method should always be triggered when clicking on the AcceptAll button on TCF UI.\n   * @param fromLayer from which layer the decision was made\n   */\n  const onAcceptAllHandler = (): void => {\n    onAcceptAll().then(() => {\n      closeView();\n    });\n  };\n\n  /**\n   * This method should always be triggered when clicking on the DenyAll button.\n   * @param fromLayer from which layer the decision was made\n   */\n  const onDenyAllHandler = (): void => {\n    onDenyAll().then(() => {\n      closeView();\n    });\n  };\n\n  useEffect(() => {\n    setTcfData(UC.getTCFData());\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (\n      (view === VIEW.FIRST_LAYER || view === VIEW.SECOND_LAYER) &&\n      (previousView === VIEW.PRIVACY_BUTTON || previousView === VIEW.NONE)\n    ) {\n      UC.setTCFUIAsOpen();\n    }\n  }, [UC, previousView, view]);\n\n  const onCloseAmp = (): void => {\n    if (dismissAmpLoading) {\n      return;\n    }\n\n    dismissAmp().then(() => {\n      setIsInFullScreen(false);\n      closeView();\n    });\n  };\n\n  /**\n   * This method should always be triggered when clicking on close button on the second layer of TCF UI.\n   */\n  const onCloseTCFHandler = (): void => {\n    if (isAmpEnabled && (settingsCloseView === VIEW.NONE || settingsCloseView === VIEW.PRIVACY_BUTTON)) {\n      dismissAmp();\n    }\n\n    // The settingsCloseView always provides a reference to the view that the secondLayer was opened from. If the\n    // secondLayer was opened from the firstLayer, then we will go back to the firstLayer (the user has to make a\n    // choice!). If the secondLayer was opened from the Privacy Button / using a button from the host website, we will\n    // go back to the Privacy Button View / no view respectively.\n\n    if (\n      (previousView === VIEW.FIRST_LAYER || previousView === VIEW.SECOND_LAYER) &&\n      (settingsCloseView === VIEW.NONE || settingsCloseView === VIEW.PRIVACY_BUTTON)\n    ) {\n      UC.setTCFUIAsClosed();\n    }\n    setView(settingsCloseView);\n  };\n\n  /**\n   * This method should always be triggered when clicking on the Save button from TCF UI.\n   * @param fromLayer from which layer the decision was made\n   */\n  const onSaveTCFHandler = (): void => {\n    if (!tcfData || updateServicesLoading || updateChoicesForTCFLoading || dismissAmpLoading || saveTcfDataAmpLoading) {\n      return;\n    }\n\n    const userDecisions = getUserDecision(categories);\n    const tcfUserDecisions = getTCFUserDecision(tcfData);\n    const fromLayer =\n      view === VIEW.FIRST_LAYER ? TCF_DECISION_UI_LAYER.FIRST_LAYER : TCF_DECISION_UI_LAYER.SECOND_LAYER;\n    // When TCF is enabled, we need to wait for both the services and the vendors/purposes to be updated before continuing.\n    Promise.all([updateServices(userDecisions), updateChoicesForTCF(tcfUserDecisions, fromLayer)]).then(async () => {\n      if (isAmpEnabled) {\n        await saveTCFDataAmp(userDecisions);\n        await dismissAmp();\n      }\n      dispatchAnalyticsEvent(view, ANALYTICS_TYPE.SAVE);\n      setTrackingPixel(TRACKING_EVENT_TYPE.CUSTOM_CHOICE, UC.setTrackingPixel, settings.interactionAnalyticsEnabled);\n      setCategories(await getUpdatedCategories(view));\n      setTcfData(UC.getTCFData());\n      closeView();\n    });\n  };\n\n  const loadingMutation =\n    updateServicesLoading || updateChoicesForTCFLoading || dismissAmpLoading || isAcceptDenyAllLoading;\n\n  const acceptAll = <AcceptAllButton disabled={loadingMutation} onClick={onAcceptAllHandler} />;\n  const denyAll = <DenyAllButton disabled={loadingMutation} onClick={onDenyAllHandler} />;\n  const customize = <CustomizeButton disabled={loadingMutation} onClick={onCustomize} />;\n  const save = <SaveButton disabled={loadingMutation} onClick={onSaveTCFHandler} />;\n\n  const firstLayerDescription = `${ui.firstLayer.description.default}\n  ${ui.firstLayer.description.additionalInfo ? ui.firstLayer.description.additionalInfo : ''}\n  ${ui.firstLayer.description.resurfaceNote ? ui.firstLayer.description.resurfaceNote : ''}\n  ${ui.scope === TCF_SCOPE.GLOBAL ? ui.firstLayer.disclaimer.globalScope : ''}\n  `;\n\n  const buttonsToShowInFirstLayer: TCFButtons = {\n    AcceptAllButton: acceptAll,\n    ...(!ui.firstLayer.hideButtonDeny && { DenyAllButton: denyAll }),\n    SaveButton: ui.firstLayer.hideToggles ? customize : save,\n  };\n\n  const buttonsToShowInSecondLayer: TCFButtons = {\n    AcceptAllButton: acceptAll,\n    ...(!ui.secondLayer.hideButtonDeny && { DenyAllButton: denyAll }),\n    SaveButton: save,\n  };\n\n  if (!tcfData) {\n    return <Fragment />;\n  }\n\n  /**\n   * SWITCH VIEW - Decision logic for showing the correct view and variant.\n   */\n  switch (view) {\n    case VIEW.FIRST_LAYER:\n      return (\n        <MainLayout\n          customActions={[\n            {\n              ariaLabel: ui.buttons.showVendorTab.label,\n              label: ui.buttons.showVendorTab.label,\n              onClick: onShowVendorsHandler,\n            },\n            ...(ui.firstLayer.hideToggles\n              ? []\n              : [\n                  {\n                    ariaLabel: ui.buttons.manageSettings.label,\n                    label: ui.buttons.manageSettings.label,\n                    onClick: onCustomize,\n                  },\n                ]),\n          ]}\n          footer={{\n            buttons: buttonsToShowInFirstLayer,\n            showBorderBeforeFooter: true,\n          }}\n          header={{\n            description: firstLayerDescription,\n            enableHTMLTextFormatting: true,\n            functions: {\n              onClose: onCloseAmp,\n              onFullScreenAmp,\n              onLanguageChange,\n            },\n            showCloseButton: false,\n            showFullScreenButton: isAmpEnabled && !isInFullScreen,\n            showLanguageSelector: true,\n            title: ui.firstLayer.title,\n          }}\n          layerSettings={{\n            isOverlayEnabled: ui.firstLayer.isOverlayEnabled,\n            layerPlacement: LAYER_PLACEMENT.CENTER,\n            ...(isIE && { minVerticalScrollerHeight: 100 }),\n            testId: testIds.firstLayer,\n            withFadingBottom: false,\n            withFadingTop: false,\n          }}\n          useBackgroundColor\n        >\n          <TCFFirstLayerContent\n            categoriesTitle={ui.labels.general.nonIabPurposes}\n            featuresTitle={ui.labels.general.features}\n            hideNonIabPurposes={ui.firstLayer.hideNonIabPurposes}\n            isVisible // should be always TRUE for TCF First Layer\n            purposesTitle={ui.labels.general.purposes}\n            useInlineToggle={!ui.firstLayer.showDescriptions}\n            useFromStackOnly\n          />\n        </MainLayout>\n      );\n    case VIEW.SECOND_LAYER:\n      return (\n        <MainLayout\n          footer={{ buttons: buttonsToShowInSecondLayer, showBorderBeforeFooter: true }}\n          header={{\n            description: ui.secondLayer.description,\n            enableHTMLTextFormatting: true,\n            functions: {\n              onClose: onCloseTCFHandler,\n              onLanguageChange,\n            },\n            showCloseButton: true,\n            showLanguageSelector: true,\n            title: ui.secondLayer.title,\n          }}\n          layerSettings={{\n            isOverlayEnabled: ui.secondLayer.isOverlayEnabled,\n            layerPlacement: LAYER_PLACEMENT.CENTER,\n            ...(isIE && { minVerticalScrollerHeight: 350 }),\n            testId: testIds.secondLayer,\n            withFadingBottom: true,\n          }}\n          useBackgroundColor={false}\n        >\n          <Tabs>\n            <TCFTabs />\n          </Tabs>\n        </MainLayout>\n      );\n    default:\n      return <Fragment />;\n  }\n};\n\nexport default memo(TCF);\n"],"names":["CustomizeButton","disabled","onClick","settings","useSettingsContext","ui","theme","useTheme","h","Button","ariaLabel","ariaLabels","ccpaMoreInformation","backgroundColor","buttons","save","bg","label","manageSettings","testid","textColor","text","sortById","arrayToBeSorted","sort","a","b","id","MapPurposes","setTcfData","tcfData","onPurposeToggleHandler","useCallback","newConsentChecked","newLegitimateInterestChecked","purposes","map","purpose","consent","legitimateInterestConsent","useMemo","checked","legitimateInterestChecked","onPurposeConsentToggle","onPurposeLegitimateInterestToggle","MapSpecialFeatures","onSpecialFeatureToggleHandler","specialFeatures","specialFeature","onSpecialFeatureToggle","MapStacks","onStackToggleHandler","toggledStack","stacks","find","stack","purposeIds","includes","specialFeatureIds","sortedStacks","filter","some","onStackConsentToggle","PaddedTitle","styled","Title","spacing","base","md","Unformatted","div","LegalDescriptionFormatter","memo","description","descriptionTitle","legalDescription","lines","getFormatedLegalDescription","Section","ListItem","Fragment","VerticalSpacer","custom","List","noPadding","line","title","bulletPoints","bp","showBulletPoints","addMargin","VirtualLegalDescriptionItem","data","index","getItemSize","setItemSize","useInlineToggle","useFromStackOnly","itemRef","useRef","updateComponentSize","useVirtualListItem","shouldShowToggles","firstLayer","hideToggles","dataId","RefContainer","ref","tabIndex","TabPanelTitle","item","getToggles","toggleId","onToggle","stackProps","ToggleRow","RowDescription","name","InlineToggle","toggles","nullishOperation","vendorConsentToggle","ExpandableCard","hideToggle","onToggleExpandable","type","useBoldTitle","basePurpose","descriptionLegal","purposeProps","showConsentToggle","showLegitimateInterestToggle","unshift","vendorLegIntToggle","legitimateInterest","specialFeatureProps","specialFeaturesToggle","onLabel","offLabel","renderItem","forwardRef","categoriesTitle","featuresTitle","hideNonIabPurposes","isVisible","purposesTitle","virtualListRef","useTcfContext","clearCategoryPurposeScrollToId","scrollToIdTabViewCategoryPurpose","view","useUiContext","purposeStacks","specialFeatureStacks","features","specialPurposes","useEffect","isPartOfASelectedStack","length","categories","MapCategories","useCategoryContext","purposesLength","specialPurposesLength","purposeStacksLength","getLengthWithExtra","featuresLength","specialFeaturesLength","specialFeaturesStacksLength","categoriesLength","purposesCount","featuresCount","itemCount","useVirtualList","addScroll","VIEW","FIRST_LAYER","VirtualListWrapper","estimatedItemSize","itemSize","scrollToIndex","Number","findIndex","purposeProp","specialPurposeProp","feature","specialFeatureProp","category","slug","getScrollIndexForId","style","VirtualChildContainer","key","getItemStyle","purposesIndex","purposeStackIndex","specialPurposesIndex","featuresIndex","specialFeaturesIndex","specialFeatureStackIndex","categoriesIndex","getIndexesRatio","hasFeatures","end","start","VirtualCategoryItem","scrollToId","showToggles","secondLayer","showServicesToggles","showOnlyConsentToggle","renderList","width","TCFFirstLayerContent","listRef","useMobileScroll","PurposesList","VendorDescription","vendor","cookieInformation","cookieInformationLabels","vendorLabels","labels","mapList","list","legitimateInterestPurposes","policyUrl","privacyPolicy","Link","href","StorageInfo","cookieMaxAgeSeconds","cookieRefresh","deviceStorage","deviceStorageDisclosureUrl","storageInfoAnchorLabel","vendorDetailedStorageInformation","usesCookies","usesNonCookieAccess","isNonIabVendor","VirtualVendorItem","vendors","onToggleAll","onToggleConsent","onToggleLegInterestConsent","showToggleAllVendors","ButtonLink","Label","toggleAll","vendorProps","showLegitimateInterestConsentToggle","push","tabs","defaultChecked","isExpandedOnInit","controllerIdLabel","serviceTitle","vendorTitle","onCloseSubServiceDetail","onOpenSubServiceDetail","selectedSubService","useSubService","subserviceRef","isTabKeyPressed","useKeyPress","targetKey","activeElement","setActiveElement","useState","setCategories","onServiceToggle","MapServices","propName","services","reduce","acc","cur","isEssential","toLowerCase","sortCategories","clearServiceVendorScrollToId","scrollToIdTabViewServiceVendors","focusedElement","document","_document$activeEleme","shadowRoot","_document$activeEleme2","querySelector","error","current","focus","hasOneVendorToggledOn","hasAllVendorToggledOff","every","hasOneCategoryToggledOn","service","status","hasAllCategoriesToggledOff","vendorsLength","servicesLength","vendorToggleAll","setVendorToggleAll","categoryToggleAll","setCategoryToggleAll","setVendorConsents","slice","onToggleVendorConsent","onToggleVendorLegInterestConsent","resolveToggleAllStatus","atLeastOneChecked","allUnchecked","toggleAllStatus","onToggleAllVendors","onToggleAllServices","ListContainer","ListWrapper","VirtualList","vendorProp","vendorsIndex","servicesIndex","areServicesFull","VirtualServiceItem","onToggleService","ControllerIdItem","SubServicesWrapper","SubServiceDetail","subService","onCloseDetail","selected","select","useTabs","initialTab","TAB_VIEW","CATEGORIES_PURPOSES","firstTabRef","secondTabRef","stickyRef","TabList","Tab","forPanel","SERVICES_VENDORS","TabPanel","general","nonIabPurposes","VendorsList","nonTCFLabels","controllerId","iabVendors","nonIabVendors","testIds","onCustomize","onFullScreenAmp","onLanguageChange","onShowVendorsHandler","onAcceptAll","onDenyAll","isAcceptDenyAllLoading","UC","isIE","useDeviceState","closeView","isAmpEnabled","isInFullScreen","previousView","setIsInFullScreen","settingsCloseView","setView","getUpdatedCategories","dismissAmp","loading","dismissAmpLoading","useMutation","saveTCFDataAmp","saveTcfDataAmpLoading","updateServices","updateServicesLoading","updateChoicesForTCF","updateChoicesForTCFLoading","getTCFData","SECOND_LAYER","PRIVACY_BUTTON","NONE","setTCFUIAsOpen","onCloseAmp","then","onCloseTCFHandler","setTCFUIAsClosed","loadingMutation","acceptAll","AcceptAllButton","denyAll","DenyAllButton","customize","SaveButton","userDecisions","getUserDecision","tcfUserDecisions","getTCFUserDecision","fromLayer","TCF_DECISION_UI_LAYER","Promise","all","async","dispatchAnalyticsEvent","ANALYTICS_TYPE","SAVE","setTrackingPixel","TRACKING_EVENT_TYPE","CUSTOM_CHOICE","interactionAnalyticsEnabled","firstLayerDescription","default","additionalInfo","resurfaceNote","scope","TCF_SCOPE","GLOBAL","disclaimer","globalScope","buttonsToShowInFirstLayer","hideButtonDeny","buttonsToShowInSecondLayer","MainLayout","customActions","showVendorTab","footer","showBorderBeforeFooter","header","enableHTMLTextFormatting","functions","onClose","showCloseButton","showFullScreenButton","showLanguageSelector","layerSettings","isOverlayEnabled","layerPlacement","LAYER_PLACEMENT","CENTER","minVerticalScrollerHeight","testId","withFadingBottom","withFadingTop","useBackgroundColor","showDescriptions","Tabs","TCFTabs"],"mappings":"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"}